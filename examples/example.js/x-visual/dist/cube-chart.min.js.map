{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:////home/ody/node_modules/anclient/lib/aes.js","webpack:////home/ody/node_modules/anclient/lib/anclient.js","webpack:////home/ody/node_modules/anclient/lib/frames/cheapflow/cheap-client.js","webpack:////home/ody/node_modules/anclient/lib/frames/cheapflow/cheap-req.js","webpack:////home/ody/node_modules/anclient/lib/opensources/ricmoo-aes-2.js","webpack:////home/ody/node_modules/anclient/lib/protocol.js","webpack:///./cube-chart/app.js","webpack:///./lib/jvector.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACmD;;AAEnD;AACA;AACA;;AAEA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,SAAS;AACvB;AACA;AACe;AACf;AACA,kBAAkB,oEAAM;AACxB;;AAEA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6EAA6E,wBAAwB,EAAE;AACvG;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,8BAA8B,EAAE;AAChC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mCAAmC,aAAa;AAChD,wCAAwC,oBAAoB;AAC5D,mCAAmC,wBAAwB;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACO;AACP;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;AChIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuB;AACI;AAC4G;;AAEvI;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA,gBAAgB,+CAAG;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,MAAM,qDAAQ;AACd;AACA,MAAM,qDAAQ,YAAY;AAC1B;AACA;AACA,WAAW;;AAEX;AACA;;AAEA;AACA;;AAEA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,GAAG;AACnB;AACA,gBAAgB,qDAAQ;AACxB;AACA;;AAEA;AACA,EAAE,qDAAQ;AACV;;AAEA;AACA,SAAS,qDAAQ;AACjB;;AAEA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,qDAAQ;;AAEpB;;AAEA;AACA,cAAc,OAAO;AACrB;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA,eAAe,IAAI;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,EAAE,gIAAC,OAAO;AACV;AACA;AACA,kCAAkC;AAClC;AACA;AACA,iBAAiB,wBAAwB;AACzC;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qDAAQ;AAC3B;;AAEA,sBAAsB,qDAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,WAAW,qDAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,iDAAiD,aAAa;AAC9D,eAAe,oBAAoB;AACnC,eAAe,GAAG;AAClB,gBAAgB,MAAM;AACtB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA,iDAAiD,aAAa;AAC9D,eAAe,oBAAoB;AACnC,eAAe,GAAG;AAClB,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,oBAAoB;AACnC,eAAe,IAAI;AACnB,eAAe,IAAI;AACnB,gBAAgB,MAAM;AACtB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEO;;AAEP;AACA;AACA;AACA;AACA,sBAAsB,kBAAkB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO,oCAAoC;AACvD,YAAY,OAAO;AACnB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,iBAAiB,mBAAmB;;AAEpC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,OAAO;AACnB,KAAK;AACL;AACA;AACA,eAAe,qDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B;;AAE5B;AACA;;AAEA,iBAAiB,uDAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qDAAQ,CAAC,qDAAQ;;AAElC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,YAAY,SAAS;AACrB,YAAY,SAAS;AACrB,YAAY,SAAS;AACrB;AACA;AACA;AACA;;AAEA;AACA,YAAY,SAAS;AACrB,YAAY,SAAS;AACrB,YAAY,SAAS;AACrB;AACA;AACA,qCAAqC,aAAa;AAClD;;AAEA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA;AACA,YAAY,OAAO;AACnB,KAAK;AACL,aAAa,SAAS;AACtB;AACA;AACA,oBAAoB,qDAAQ;;AAE5B,eAAe,qDAAQ;AACvB;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;;AAEA,iBAAiB,qDAAQ,CAAC,qDAAQ;AAClC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,MAAM;AAC5C;AACA;;AAEA,gBAAgB,sDAAS;AACzB,UAAU,qDAAQ;AAClB;AACA,gCAAgC,qDAAQ;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,gBAAgB,sDAAS;AACzB;AACA;AACA,gCAAgC,qDAAQ;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sCAAsC,MAAM;AAC5C;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,sDAAS;AACzB,UAAU,qDAAQ;AAClB;;AAEA;AACA;AACA,IAAI,qDAAQ;AACZ;AACA;AACA;;AAEA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,iBAAiB;AAC7B,YAAY,OAAO;AACnB,aAAa,oBAAoB;AACjC;AACA,eAAe,qDAAQ;AACvB;AACA;AACA;AACA;AACA,aAAa,qDAAQ;AACrB;;AAEA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,aAAa,cAAc;AAC3B;AACA;AACA;AACA;AACA,IAAI,qDAAqD;AACzD;AACA;;AAEA;AACA,YAAY,OAAO;AACnB,aAAa,cAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE8B;AACkB;AACG;AACD;;;;;;;;;;;;;;;;;AC7iBlD;;AAEA;AAC8D;;AAE9D;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,sDAAQ;;AAE/B;AACA,kBAAkB,wDAAU;;AAE5B;AACA;AACA;AACA;;AAEA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA,qBAAqB,sDAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,sDAAQ;AAC7B;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA,YAAY,SAAS;AACrB,YAAY,OAAO;AACnB,iBAAiB,OAAO;AACxB,eAAe,SAAS;AACxB,aAAa,YAAY;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,uDAAS;AAC3B;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,sDAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEqB;;;;;;;;;;;;;;;;;;;;AC3GE;AAC2D;;AAElF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,OAAO;AACnB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB;AACxB;AACA;AACA,kDAAkD,KAAK;AACvD;AACA;AACA;AACA;AACA;AACA,sBAAsB,0BAA0B;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,OAAO;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,2CAA2C;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,eAAe,sBAAsB;AACrC,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,sBAAsB;AAClC,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEyC;;;;;;;;;;;;;ACtKzC;AAAa;;AAGb;;AAEA;AACA;AACA;;AAEA;AACA,yCAAyC,cAAc;;AAEvD,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA,yBAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;;AAGL;AACA,0BAA0B;;AAE1B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,uBAAuB,aAAa;AACpC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,QAAQ;AACvC;AACA;;AAEA;AACA,aAAa;AACb,+BAA+B,cAAc;AAC7C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,0CAA0C,QAAQ;AAClD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,YAAY;AACnC,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;;AAEA;AACA,uBAAuB,YAAY;AACnC,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;;AAEA;AACA,uBAAuB,YAAY;AACnC,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,uBAAuB,sBAAsB;AAC7C;;AAEA,2BAA2B,QAAQ;AACnC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,uBAAuB,uBAAuB;AAC9C;AACA;;AAEA,2BAA2B,QAAQ;AACnC;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,SAAS;AACT;AACA;;AAEA,2BAA2B,iBAAiB;;AAE5C;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,uBAAuB,sBAAsB;AAC7C;AACA,2BAA2B,sBAAsB;AACjD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,uBAAuB,sBAAsB;AAC7C;;AAEA,2BAA2B,sBAAsB;AACjD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kDAAkD,kBAAkB;;AAEpE;AACA;AACA;;AAEA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,mBAAmB;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,0CAA0C;;AAEzE;AACA,0BAA0B,qDAAqD;;AAE/E;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA,KAAK;;;AAGL;AACA,CAAC;;;;;;;;;;;;;ACryBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;;AAEA,eAAe,YAAY;AAC3B,YAAY,MAAM;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,YAAY;AAC5B,YAAY,MAAM;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,kBAAkB;;AAElB,kBAAkB;AAClB;AACA;AACA;;AAEA,qBAAqB;AACrB;AACA;;AAEA,oBAAoB;;AAEpB,kBAAkB;;AAElB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAY,OAAO;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,YAAY,UAAU;AACtB,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,OAAO,MAAM;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,OAAO;AACnB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,OAAO;AACnB,aAAa,WAAW;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO,mEAAmE,SAAS;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA,0DAA0D,GAAG;AAC7D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb,UAAU;AACV,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;;AAEA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO,KAAK,MAAM;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,aAAa,UAAU;AACvB;AACA,qBAAqB,IAAI;AACzB;;AAEA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;;AAEA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,aAAa,UAAU;AACvB;AACA;AACA;;AAEA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;;AAEA;AACA,YAAY,sBAAsB;AAClC,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,aAAa,UAAU;AACvB;AACA;AACA;;AAEA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,aAAa,UAAU;AACvB;AACA,qBAAqB,IAAI;AACzB;;AAEA;AACA;AACA,YAAY,aAAa;AACzB,oEAAoE,YAAY;AAChF;AACA;AACA;AACA,YAAY,OAAO;AACnB,aAAa,UAAU;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,6CAA6C;AAChE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,sCAAsC,gBAAgB;AACtD;AACA;AACA;AACA,YAAY,OAAO;AACnB,aAAa,MAAM,eAAe,gBAAgB;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,QAAQ;AACpB;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,qBAAqB;;AAE1C;AACA;AACA,YAAY,cAAc;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAGgC;;;;;;;;;;;;;ACjxBhC;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAC8B;AACA;AACkB;;AAEhD;AACA;AACA;AACA;AACO;AACP;AACA;AACA,YAAY,2CAAK;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qBAAqB,oDAAO;AAC5B;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,gBAAgB,iDAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvDA;AAAA;AAAA;AAAA;AAAA;AAAoD;;AAE7C;;AAEA;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAIA;AACA,YAAY,cAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,gDAAO;AAC3B,SAAS;;AAET,eAAe,iDAAQ;;AAEvB;AACA,sBAAsB;AACtB;AACA;AACA,+BAA+B;;AAE/B,iBAAiB,iDAAQ,CAAC,iDAAQ;;AAElC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,YAAY,UAAU;AACtB,aAAa,MAAM,IAAI,4BAA4B;AACnD;AACA,QAAQ;AACR,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS,iDAAQ;AACjB;;;AAGA;AACA;AACA;AACA;AACA,YAAY,UAAU;AACtB,aAAa,OAAO,IAAI,4BAA4B;AACpD;AACA;AACA,SAAS,iDAAQ;AACjB;;AAEA,aAAa;AACb,aAAa;AACb,aAAa;AACb","file":"cube-chart.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./cube-chart/app.js\");\n","/* ricomoo aes wrapper\n * Design notes:\n * AES is just only one of crypto algorithms, so we need make this pluginized so \n * can be overriden by user.\n */\nimport AESLib from './opensources/ricmoo-aes-2.js';\n\n/* The ricomoo AES Wrapper.\n * The dependee class is ported from github/ricomoo, the original soruce file doesn't have any license declarations.\n * @module jclient/js/aes */\n\n/**AES class \n * @class\n * @property {AESLib} aesLib the ricomoo/aes\n * @protpery {function} encrypt\n *\n */\nexport default function AES () {\n\tvar verbose = false;\n\tvar aesLib = new AESLib(window);\n\t// aesLib(window);\n\n\t/**get byte[] of random 128bits iv\n\t * @return {byte[]} iv\n\t */\n\tthis.getIv128 = function () {\n\t\tvar iv = new Array(16);\n\t\tfor (var i = 0; i < 16; i++) {\n\t\t\tiv[i] = Math.random() * 101;\n\t\t}\n\t\tiv = new Uint8Array(iv);\n\t\treturn iv;\n\t}\n\n\tthis.encrypt = function (txt, key, iv) {\n\t\t//txt = pad(txt, 16);\n\t\ttxt = this.pad16m(txt);\n\t\tif (this.verbose) console.log(\"txt: \" + txt);\n\t\tvar textBytes = aesjs.utils.utf8.toBytes(txt);\n\t\tkey = this.pad16m(key);\n\t\tif (this.verbose) console.log(\"key: \" + key);\n\t\tvar keyBytes = aesjs.utils.utf8.toBytes(key);\n\t\tvar aesCbc = new aesjs.ModeOfOperation.cbc(keyBytes, iv);\n\t\tvar encryptedBytes = aesCbc.encrypt(textBytes);\n\n\t\t// check https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string\n\t\t// var encryptedB64  = btoa(String.fromCharCode.apply(null, encryptedBytes));\n\t\tvar encryptedB64 = this.bytesToB64(encryptedBytes);\n\t\t// var u8_2 = new Uint8Array(atob(encryptedB64).split(\"\").map(function(c) { return c.charCodeAt(0); }));\n\t\treturn encryptedB64;\n\t}\n\n\tthis.bytesToB64 = function (byteArr) {\n\t\treturn btoa(String.fromCharCode.apply(null, byteArr));\n\t}\n\n\tthis.b64ToBytes = function (b64Str) {\n\t\treturn new Uint8Array(atob(b64Str).split(\"\").map(function(c) {\n\t\t\treturn c.charCodeAt(0);\n\t\t}));\n\t}\n\n\tthis.decrypt = function (cipherB64, key, iv) {\n\t\t// check https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string\n\t\t//var encryptedBytes = new Uint8Array(atob(cipherB64).split(\"\").map(function(c) {\n\t\t//   return c.charCodeAt(0); }));\n\t\tvar encryptedBytes = this.b64ToBytes(cipherB64);\n\n\t\t// The cipher-block chaining mode of operation maintains internal\n\t\t// state, so to decrypt a new instance must be instantiated.\n\t\tvar keyBytes = aesjs.utils.utf8.toBytes(key);\n\t\tvar aesCbc = new aesjs.ModeOfOperation.cbc(keyBytes, iv);\n\t\tvar decryptedBytes = aesCbc.decrypt(encryptedBytes);\n\n\t\t// Convert our bytes back into text\n\t\tvar decryptedText = aesjs.utils.utf8.fromBytes(decryptedBytes);\n\t\treturn decryptedText.trim();\n\t}\n\n\tthis.pad16m = function (str, paddings, dir) {\n\t\tvar len = str.length;\n\t\tlen = Math.ceil(len / 16);\n\t\treturn this.pad(str, len * 16, paddings, dir);\n\t}\n\n\tvar STR_PAD_LEFT = 1;\n\tvar STR_PAD_RIGHT = 2;\n\tvar STR_PAD_BOTH = 3;\n\n\tthis.pad = function (str, len, paddings, dir) {\n\t\tif (typeof(len) == \"undefined\") { var len = 0; }\n\t\tif (typeof(paddings) == \"undefined\") { var paddings = '-'; }\n\t\tif (typeof(dir) == \"undefined\") { var dir = STR_PAD_LEFT; }\n\n\t\tif (len + 1 >= str.length) {\n\t\t\tswitch (dir) {\n\t\t\t\tcase STR_PAD_RIGHT:\n\t\t\t\t\tstr = str + Array(len + 1 - str.length).join(paddings);\n\t\t\t\t\tbreak;\n\t\t\t\tcase STR_PAD_BOTH:\n\t\t\t\t\tvar right = Math.ceil((padlen = len - str.length) / 2);\n\t\t\t\t\tvar left = padlen - right;\n\t\t\t\t\tstr = Array(left + 1).join(paddings) + str + Array(right + 1).join(paddings);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tstr = Array(len + 1 - str.length).join(paddings) + str;\n\t\t\t\t\tbreak;\n\t\t\t} // switch\n\t\t}\n\t\treturn str;\n\t}\n}\n\n/**\n * @constructor\n * Test JS AES \n * @class*/\nexport function testAES() {\n\tvar aes = new AES();\n\n\tvar iv = aes.getIv128();\n\tvar k = aes.pad16m(\"my-password\");\n\n\tvar c = aes.encrypt(\"plain-text\", k, iv);\n\tconsole.log(c);\n\n\tvar p = aes.decrypt(c, k, iv);\n\tconsole.log(p);\n}\n","import $ from 'jquery';\nimport AES from './aes.js';\nimport {Protocol, AnsonMsg, AnHeader, UserReq, SessionReq, QueryReq, UpdateReq, DeleteReq, InsertReq, DatasetCfg} from './protocol.js';\n\n/**The lower API of jclient/js\n * @module anclient/js/core\n * */\n\n/**\n * AES instance\n * @type {AES}\n * */\nconst aes = new AES();\n\n/**An client.js core API\n * Java equivalent of\n * io.odysz.jclient.Clients;\n * @property cfg the configurations,<br>\n * cfg.connId,<br>\n * cfg.verbose,<br>\n * cfg.defaultServ:<br>\n * where defaultserv is the serv root, will be concated with port name for different poert.\n */\nclass AnClient {\n\t/**@param {string} serv serv path root, e.g. 'http://localhost/jsample'\n\t */\n\tconstructor (urlRoot) {\n\t \tthis.cfg = {\n\t\t\tconnId: null,\n\t\t\tverbose: 5,\n\t\t\tdefaultServ: urlRoot,\n\t\t}\n\t\t// aes = new AES();\n\t}\n\n    /**Get port url of the port.\n     * @param {string} port the port name\n     * @return the url\n     */\n\tservUrl (port) {\n\t\t// This is a common error in jeasy frame\n\t\tif (port === undefined || port === null) {\n\t\t\tconsole.error(\"Port is null!\");\n\t\t\treturn;\n\t\t}\n\n\t\t// Protocol can't visited when debugging, but working:\n\t\t// console.log(Protocol.Port);\n\t\t// console.log(\"Protocol.Port[\" + port + \"] : \" + Protocol.Port[port]);\n\n\t\tvar ulr;\n\t\tif (Protocol.Port[port] !== undefined)\n\t\t\tulr = this.cfg.defaultServ + '/'\n\t\t\t\t+ Protocol.Port[port]; // + '?conn=' + this.cfg.connId;\n\t\telse\n\t\t\tulr = this.cfg.defaultServ + '/'\n\t\t\t\t+ port; // + '?conn=' + this.cfg.connId;\n\n\t\tif (this.cfg.connId)\n\t\t\tulr += '?conn=' + this.cfg.connId;\n\n\t\treturn ulr;\n\t}\n\n    /** initialize with url and default connection id\n     * @param {stirng} urlRoot root url\n     * @param {string} connId connection Id\n     * @retun {An} this */\n\tinit (urlRoot, connId) {\n\t\tthis.cfg.cconnId = connId;\n\t\tthis.cfg.defaultServ = urlRoot;\n        return this;\n\t}\n\n    /** Understand the prots' name of the calling app's.<br>\n     * As jclient defined the basice ports, more ports extension shoould been understood by the API lib.\n     * This function must been callded to extned port's names.\n     * @param {string} new Ports\n     * @return {An} this */\n\tunderstandPorts (newPorts) {\n\t\tObject.assign(Protocol.Port, newPorts);\n        return this;\n\t}\n\n\topts(options) {\n\t\tProtocol.opts(options);\n\t}\n\n\tport(name) {\n\t\treturn Protocol.Port[name];\n\t}\n\n    /**Login to jserv\n     * @param {string} usrId\n     * @param {string} pswd\n     * @param {function} onLogin on login ok handler\n     * @param {function} on failed\n     */\n\tlogin (usrId, pswd, onLogin, onError) {\n\t\t// byte[] iv =   AESHelper.getRandom();\n\t\t// String iv64 = AESHelper.encode64(iv);\n\t\t// String tk64 = AESHelper.encrypt(uid, pswdPlain, iv);\n\t\tconsole.log('An.login(' + usrId + ', ' + pswd + ', ...)');\n\n\t\tvar iv = aes.getIv128();\n\t\tvar c = aes.encrypt(usrId, pswd, iv);\n\t\t// var qobj = formatLogin(logId, c, bytesToB64(iv));\n\t\tvar req = Protocol.formatSessionLogin(usrId, c, aes.bytesToB64(iv));\n\n\t\tvar An = this;\n\n\t\tthis.post(req,\n\t\t\t/**@param {object} resp\n\t\t\t * code: \"ok\"\n\t\t\t * data: Object { uid: \"admin\", ssid: \"3sjUJk2JszDm\", \"user-name\": \"admin\" }\n\t\t\t * port: \"session\"\n\t\t\t */\n\t\t\tfunction(resp) {\n\t\t\t\t// var sessionClient = new SessionClient(resp.data, iv, true);\n\t\t\t\tvar sessionClient = new SessionClient(resp.body[0].ssInf, iv, true);\n\t\t\t\tsessionClient.An = An;\n\t\t\t\tif (typeof onLogin === \"function\")\n\t\t\t\t\tonLogin(sessionClient);\n\t\t\t\telse console.log(sessionClient);\n\t\t\t},\n\t\t\tonError);\n\t}\n\n    /**Check Response form jserv\n     * @param {any} resp\n     */\n\tstatic checkResponse(resp) {\n\t\tif (typeof resp === \"undefined\" || resp === null || resp.length < 2)\n\t\t\treturn \"err_NA\";\n\t\telse return false;\n\t}\n\n    /**Post a request, using Ajax.\n     * @param {AnsonMsg} jreq\n     * @param {function} onOk\n     * @param {function} onErr\n     * @param {object} ajaxOpts */\n\tpost (jreq, onOk, onErr, ajaxOpts) {\n\t\tif (jreq === undefined) {\n\t\t\tconsole.error('jreq is null');\n\t\t\treturn;\n\t\t}\n\t\tif (jreq.port === undefined || jreq.port == '') {\n\t\t\t// TODO docs...\n\t\t\tconsole.error('Port is null - you probably created a requesting AnsonMsg with \"new [User|Query|...]Req()\".\\n',\n\t\t\t\t'Creating a new request message can mainly throught one of 2 way:\\n',\n\t\t\t\t'Way 1: Using a jclient helper, like those in jeasy-html.js/EasyModal.save().\\n',\n\t\t\t\t'Way 2: Using a ssClient request API, e.g. ssClient.delete().',\n\t\t\t\t'TODO docs...');\n\t\t\treturn;\n\t\t}\n\t\tvar url = this.servUrl(jreq.port);\n\n\t\tvar async =  true;\n\t\tif (ajaxOpts !== undefined && ajaxOpts !== null) {\n\t\t\tasync = ajaxOpts.async !== false;\n\t\t}\n\n\t\tvar self = this;\n\t\t$.ajax({type: 'POST',\n\t\t\t// url: this.cfg.defaultServ + \"/query.serv?page=\" + pgIx + \"&size=\" + pgSize,\n\t\t\turl: url,\n\t\t\tcontentType: \"application/json; charset=utf-8\",\n\t\t\tcrossDomain: true,\n            async: async,\n\t\t\t//xhrFields: { withCredentials: true },\n\t\t\tdata: JSON.stringify(jreq),\n\t\t\tsuccess: function (resp) {\n\t\t\t\t// response Content-Type = application/json;charset=UTF-8\n\t\t\t\tif (typeof resp === 'string') {\n\t\t\t\t\t// why?\n\t\t\t\t\tresp = JSON.parse(resp);\n\t\t\t\t}\n\t\t\t\t// code != ok\n\t\t\t\tif (self.cfg.verbose >= 5){\n\t\t\t\t\tconsole.debug(Protocol.MsgCode);\n\t\t\t\t}\n\n\t\t\t\tif (resp.code !== Protocol.MsgCode.ok)\n\t\t\t\t\tif (typeof onErr === \"function\")\n\t\t\t\t\t\tonErr(resp.code, resp);\n\t\t\t\t\telse console.error(resp);\n\t\t\t\t// code == ok\n\t\t\t\telse {\n\t\t\t\t\tif (typeof onOk === \"function\")\n\t\t\t\t\t\tonOk(resp);\n\t\t\t\t\telse console.log(resp);\n\t\t\t\t}\n\t\t\t},\n\t\t\terror: function (resp) {\n\t\t\t\tif (typeof onErr === \"function\") {\n\t\t\t\t\tconsole.error(\"ajax error:\", url);\n\t\t\t\t\tonErr(Protocol.MsgCode.exIo, resp);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconsole.error(\"ajax error:\", url);\n\t\t\t\t\tconsole.error(\"req\", jreq);\n\t\t\t\t\tconsole.error(\"response\", resp);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t// TODO moved to semantic resultset?\n    /** Get the cols from jserv's rows\n     * (response from port returning AnsonMsg&lt;AnsonResp&gt;)\n     * @param {AnsonMsg<AnsonResp>} resp\n     * @param {ix} the rs index\n     * @return {array} array of column names */\n\trespCols(resp, ix) {\n\t\tif (ix === null || ix === undefined )\n\t\t\tix = 0;\n\t\t// colnames: {TEXT: [2, \"text\"], VALUE: [1, \"value\"]}\n\t\tvar colIx = resp !== null && resp !== undefined && resp.code === \"ok\"\n\t\t\t? resp.body[0].rs[0].colnames : [];\n\n\t\tvar cols = new Array(colIx.length);\n\t\tObject.keys(colIx).forEach(function (k, ix) {\n\t\t\t// Design Memo: java Resultset index start from 1.\n\t\t\tcols[colIx[k][0] - 1] = colIx[k][1];\n\t\t})\n\t\treturn cols;\n\t}\n\n    /** Get the rows from jserv's rows.\n     * (response from port returning AnsonMsg&lt;AnsonResp&gt;)\n     * @param {AnsonMsg<AnsonResp>} resp\n     * @param {ix} the rs index\n     * @return {array} array of rows */\n\trespRows(resp, ix) {\n\t\tif (ix === null || ix === undefined )\n\t\t\tix = 0;\n\t\treturn resp !== null && resp !== undefined && resp.code === \"ok\"\n\t\t\t// ? resp.data.rs[ix].slice(1) : [];\n\t\t\t? resp.body[0].rs[0].results : [];\n\t}\n\n    /** Get the objects from jserv's rows (response from port returning SResultsets)\n     * @param {AnsonMsg<AnsonResp>} resp\n     * @param {int} start start to splice\n     * @param {int} len max length\n     * @return {array} array of objects<br>\n     * e.g [ [col1: cell1], ...] */\n\trespObjs(resp, start, len) {\n\t\tvar cols = this.respCols(resp);\n\n\t\t// start from 0\n\t\tif (typeof start !== 'number')\n\t\t\tstart = 0;\n\n\t\tif (typeof len !== 'number')\n\t\t\t// len = resp.data.rs[0].length - 1;\n\t\t\tlen = resp.body[0].rs[0].results.length;\n\t\telse\n\t\t\tlen = Math.min(len, resp.body[0].rs[0].results.length);\n\n\t\tif (resp.body[0].rs[0].results) {\n\t\t\treturn resp.body[0].rs[0].results.splice(start, len)\n\t\t}\n\t}\n}\n\nexport const an = new AnClient();\n\n/**Client with session logged in.\n * Equivalent of java io.odysz.jclient.SessionClient;\n */\nclass SessionClient {\n\tstatic get ssInfo() { return \"ss-info\"; }\n\n\t/**Create SessionClient with credential information or load from localStorage.<br>\n\t * Because of two senarios of login / home page integration, there are 2 typical useses:<br>\n\t * Use Case 1 (persisted): logged in, then create a client with response,\n\t * \t\tsave in local storage, then load it in new page.<br>\n\t * Use Case 1 (not persisted): logged in, then create a client with response,\n\t * \t\tuser's app handled the object, then provided to other functions,<br>\n\t * \t\ttypicall a home.vue component.<br>\n\t * <p><b>Note</b></p>\n\t * <p>Local storage may be sometimes confusing if not familiar with W3C standars.<br>\n\t * The local storage can't be cross domain referenced. It's can not been loaded by home page\n\t * if you linked from login page like this, as showed by this example in login.vue:</p>\n\t * <p>window.top.location = response.home</p>\n\t * <p>One recommended practice is initializing home.vue with login credential\n\t * by login.vue, in app.vue.</p>\n\t * <p>But this design makes home page and login component integrated. It's not\n\t * friedly to application pattern like a port page with login which is independent\n\t * to the system background home page.</p>\n\t * <p>How should this pattern can be improved is open for discussion.\n\t * If your are interested in this subject, leave any comments in wiki page please.</p>\n\t * @param {object} ssInf login response form server: {ssid, uid}\n\t * @param {byte[]} iv iv used for cipher when login.\n\t * @param {boolean} dontPersist don't save into local storage.\n\t */\n\tconstructor (ssInf, iv, dontPersist) {\n\t\tif (ssInf) {\n\t\t\t// logged in, create from credential\n\t\t\tthis.ssInf = ssInf;\n\t\t\t// try tolerate easyUI trouble\n\t\t\tif (typeof iv === 'string') {\n\t\t\t\t// really not expected\n\t\t\t\t;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.ssInf.iv = aes.bytesToB64(iv);\n\t\t\t}\n\n\t\t\tif (!dontPersist) {\n\t\t\t\tvar infStr = JSON.stringify(this.ssInf);\n\t\t\t\tlocalStorage.setItem(SessionClient.ssInfo, infStr);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// jumped, create from local storage\n\t\t\tvar sstr = localStorage.getItem(SessionClient.ssInfo);\n\t\t\tif (sstr) {\n\t\t\t\tthis.ssInf = JSON.parse(sstr);\n\t\t\t\tthis.ssInf.iv = aes.b64ToBytes(this.ssInf.iv);\n\t\t\t}\n\t\t\telse\n\t\t\t\tconsole.error(\"Can't find credential in local storage. SessionClient creating failed.\");\n\t\t}\n\n\t\tthis.an = an;\n\t}\n\n\tget userInfo() { return this.ssInf; }\n\n\tconsumeNotifies() {\n\t\tif (this.ssInf) {\n\t\t\treturn this.ssInf['_notifies_'];\n\t\t}\n\t}\n\n\t/**Get a header the jserv can verify successfully.\n\t * This method is not recommended used directly.\n\t * @param {Object} act user's action for logging<br>\n\t * {func, cate, cmd, remarks};\n\t * @return the logged in header */\n\tgetHeader(act) {\n\t\tvar header = Protocol.formatHeader(this.ssInf);\n\t\tif (typeof act === 'object') {\n\t\t\theader.userAct(act);\n\t\t}\n\t\telse {\n\t\t\theader.userAct(\n\t\t\t\t{func: 'ext',\n\t\t\t\t cmd: 'unknow',\n\t\t\t\t cate: 'ext',\n\t\t\t\t remarks: 'raw header'} );\n\t\t}\n\t\treturn header;\n\t}\n\n\tsetPswd(oldPswd, newPswd, opts) {\n\t\tvar usrId = this.ssInf.uid;\n\t\tvar iv_tok = aes.getIv128();\n\t\tvar iv_new = aes.getIv128();\n\t\tvar iv_old = aes.getIv128();\n\n\t\t// var tk = aes.encrypt(usrId, pswd, iv_tok);\n\t\tvar tk = this.ssInf.ssid;\n\t\tvar key = this.ssInf.ssid; // FIXME\n\n\t\tvar newPswd = aes.encrypt(newPswd, key, iv_new);\n\t\tvar oldPswd = aes.encrypt(oldPswd, key, iv_old);\n\n\t\tvar body = new SessionReq(usrId,\n\t\t\ttk, aes.bytesToB64(iv_tok)) //  tk and iv_tok shouldn't bee used\n\t\t\t\t.a('pswd')\n\t\t\t\t.md('pswd', newPswd)\n\t\t\t\t.md('iv_pswd', aes.bytesToB64(iv_new))\n\t\t\t\t.md('oldpswd', oldPswd)\n\t\t\t\t.md('iv_old', aes.bytesToB64(iv_old));\n\t\tvar jmsg = new AnsonMsg(Protocol.Port.session, this.getHeader(), body);\n\n\t\tif (opts === undefined) {\n\t\t\topts = {};\n\t\t}\n\n\t\tthis.an.post(jmsg, opts.onok, opts.onerror);\n\t\treturn this;\n\t}\n\n\t/**Post the request message (AnsonMsg with body of subclass of AnsonBody).\n\t * @param {AnsonMsg} jmsg request message\n\t * @param {function} onOk\n\t * @param {function} onError\n\t */\n\tcommit(jmsg, onOk, onError) {\n\t\tthis.an.post(jmsg, onOk, onError);\n\t}\n\n\t/**Post the request message (AnsonMsg with body of subclass of AnsonBody) synchronously.\n\t * @param {AnsonMsg} jmsg request message\n\t * @param {function} onOk\n\t * @param {function} onError\n\t */\n\tcommitSync(jmsg, onOk, onError) {\n\t\tthis.an.post(jmsg, onOk, onError, {async: false});\n\t}\n\n\t/**\n\t * create a query message.\n\t * @param {string} conn connection id\n\t * @param {string} maintbl target table\n\t * @param {string} alias target table alias\n\t * @param {Object} pageInf<br>\n\t * page: page index, -1 for no paging<br>\n\t * size: page size, default 20, -1 for no paging\n\t * @param {Object} act user's action for logging<br>\n\t * {func, cate, cmd, remarks};\n\t * @return {AnsonMsg} the request message\n\t */\n\tquery(conn, maintbl, alias, pageInf, act) {\n\t\tvar qryItem = new QueryReq(conn, maintbl, alias, pageInf);\n\n\t\tvar header = Protocol.formatHeader(this.ssInf);\n\t\tif (typeof act === 'object') {\n\t\t\tthis.usrAct(act.func, act.cate, act.cmd, act.remarks);\n\t\t}\n\t\telse {\n\t\t\tact = { func: 'query',\n\t\t\t\t\tcmd: 'select',\n\t\t\t\t\tcate: 'r',\n\t\t\t\t\tremarks: 'session query'};\n\t\t}\n\n\t\tvar header = this.getHeader(act);\n\n\t\tvar jreq = new AnsonMsg(Protocol.Port.query, header, qryItem);\n\t\treturn jreq;\n\t}\n\n\tupdate(conn, maintbl, pk, nvs) {\n\t\tif (this.currentAct === undefined || this.currentAct.func === undefined)\n\t\t\tconsole.error(\"jclient is designed to support user updating log natively, User action with function Id shouldn't ignored.\",\n\t\t\t\t\t\t\"To setup user's action information, call ssClient.usrAct().\");\n\n\t\tif (pk === undefined) {\n\t\t\tconsole.error(\"To update a table, {pk, v} must presented.\", pk);\n\t\t\treturn;\n\t\t}\n\n\t\tvar upd = new UpdateReq(conn, maintbl, pk);\n\t\tupd.a = Protocol.CRUD.u;\n\t\tthis.currentAct.cmd = 'update';\n\t\tvar jmsg = this.userReq(conn, Protocol.Port.update, upd, this.currentAct);\n\n\t\tif (nvs !== undefined) {\n\t\t\tif (Array.isArray(nvs))\n\t\t\t\tupd.nv(nvs);\n\t\t\telse console.error(\"updating nvs must be an array of name-value.\", nvs)\n\t\t}\n\t\treturn jmsg;\n\t}\n\n\tinsert(conn, maintbl, nvs) {\n\t\tif (this.currentAct === undefined || this.currentAct.func === undefined)\n\t\t\tconsole.error(\"jclient is designed to support user updating log natively, User action with function Id shouldn't ignored.\",\n\t\t\t\t\t\t\"To setup user's action information, call ssClient.usrAct().\");\n\n\t\tvar ins = new InsertReq(conn, maintbl);\n\t\t// ins.a = Protocol.CRUD.c;\n\t\tthis.currentAct.cmd = 'insert';\n\t\tvar jmsg = this.userReq(conn, Protocol.Port.insert, ins, this.currentAct);\n\n\t\tif (nvs !== undefined) {\n\t\t\tif (Array.isArray(nvs))\n\t\t\t\tins.valus(nvs);\n\t\t\telse console.error(\"updating nvs must be an array of name-value.\", nvs)\n\t\t}\n\t\treturn jmsg;\n\t}\n\n\tdelete(conn, maintbl, pk) {\n\t\tif (this.currentAct === undefined || this.currentAct.func === undefined)\n\t\t\tconsole.error(\"jclient is designed to support user updating log natively, User action with function Id shouldn't ignored.\",\n\t\t\t\t\t\t\"To setup user's action information, call ssClient.usrAct().\");\n\t\tif (pk === undefined) {\n\t\t\tconsole.error(\"To delete a table, {pk, v} must presented.\", pk);\n\t\t\treturn;\n\t\t}\n\t\tif (maintbl === undefined || maintbl === null || maintbl === \"\") {\n\t\t\tconsole.error(\"To delete a table, maintbl must presented.\");\n\t\t\treturn;\n\t\t}\n\n\t\tvar upd = new UpdateReq(conn, maintbl, pk);\n\t\tupd.a = Protocol.CRUD.d;\n\t\tthis.currentAct.cmd = 'delete';\n\n\t\tvar jmsg = this.userReq(conn,\n\t\t\t\t// port = update, it's where the servlet handling this.\n\t\t\t\tProtocol.Port.update,\n\t\t\t\tupd, this.currentAct);\n\t\treturn jmsg;\n\t}\n\n\t/**Create a user request AnsonMsg.\n\t * @param {string} conn connection id\n\t * @param {string} port\n\t * @param {Protocol.UserReq} bodyItem request body, created by like: new jvue.UserReq(conn, tabl).\n\t * @param {Object} act action, optional.\n\t * @return {AnsonMsg<AnUserReq>} AnsonMsg */\n\tuserReq(conn, port, bodyItem, act) {\n\t\tvar header = Protocol.formatHeader(this.ssInf);\n\t\tif (typeof act === 'object') {\n\t\t\theader.userAct = act;\n\t\t\tthis.usrAct(act.func, act.cate, act.cmd, act.remarks);\n\t\t}\n\t\treturn new AnsonMsg(port, header, bodyItem);\n\t}\n\n\t/**Set user's current action to be logged.\n\t * @param {string} funcId curent function id\n\t * @param {string} cate category flag\n\t * @param {string} cmd\n\t * @param {string} remarks\n\t * @return {SessionClient} this */\n\tusrAct(funcId, cate, cmd, remarks) {\n\t\tif (this.currentAct === undefined)\n\t\t\tthis.currentAct = {};\n\t\tObject.assign(this.currentAct,\n\t\t\t{func: funcId, cate: cate, cmd: cmd, remarks: remarks});\n\t\treturn this;\n\t}\n\n\t/**Set user's current action to be logged.\n\t * @param {string} cmd user's command, e.g. 'save'\n\t * @return {SessionClient} this */\n\tusrCmd(cmd) {\n\t\tif (this.currentAct === undefined)\n\t\t\tthis.currentAct = {};\n\t\tthis.currentAct.cmd = cmd;\n\t\treturn this;\n\t}\n\n\tcommit (jmsg, onOk, onErr) {\n\t\tan.post(jmsg, onOk, onErr);\n\t}\n}\n\n/**Client without session information.\n * This is needed for some senarios like rigerstering new account.*/\nclass Inseclient {\n\tcommit (jmsg, onOk, onErr) {\n\t\tan.post(jmsg, onOk, onErr);\n\t}\n}\n\nexport * from './protocol.js';\nexport * from './frames/cheapflow/cheap-req.js';\nexport * from './frames/cheapflow/cheap-client.js';\nexport {AnClient, SessionClient, Inseclient, aes};\n","\n/* */\n\n// import $ from 'jquery';\nimport {CheapReq, chpEnumReq, CheapCode} from './cheap-req.js'\n\nclass CheapClient {\n\tconstructor (ssclient, cheaport) {\n\t\tthis.connId = null;\n\n\t\tif (typeof cheaport === 'string')\n\t\t\tthis.cheaport = cheaport;\n\t\telse this.cheaport = CheapReq.port;\n\n\t\tthis.jclient = ssclient;\n\t\tthis.cheapReq = chpEnumReq;\n\n\t\tthis.conn = function (conn) {\n\t\t\tthis.connId = conn;\n\t\t}\n\t}\n\n\t/**Load a task's workflow nodes joined with instances.\n\t * @param {string} wfId\n\t * @param {object} opts<br>\n\t * opts.taskId: task id<br>\n\t */\n\tloadFlow (wfId, opts) {\n\t\t// this.cmdArgs = [wfId, taskId];\n\t\tvar cheapReq = new CheapReq(wfId)\n\t\t\t\t\t\t.a(this.cheapReq.load)\n\t\t\t\t\t\t.taskId(opts.taskId);\n\t\tvar jmsg = this.jclient.userReq(this.connId, engports.cheapflow, cheapReq);\n\t\tthis.jclient.commit(jmsg, opts.onok, function (c, d) {\n\t\t\tif (typeof opts.onerror === 'function')\n\t\t\t\topts.onerror(c, d);\n\t\t\telse EasyMsger.error(c, d);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**Load commands\n\t * @param {string} wfId\n\t * @param {object} opts<br>\n\t * opts.taskId: task id<br>\n\t * opts.nodeId: node Id<br>\n\t * opts.usrId: user Id<br>\n\t */\n\tloadCmds (wfId, opts) {\n\t\tif (typeof wfId !== 'string' || typeof opts.nodeId !== 'string') {\n\t\t\tconsole.error('Parameters invalid: wfId, opts.nodeId',\n\t\t\t\twfId, opts);\n\t\t\treturn;\n\t\t}\n\n\t\tvar cheapReq = new CheapReq(wfId)\n\t\t\t\t\t\t.a(this.cheapReq.nodeCmds)\n\t\t\t\t\t\t.nodeId(opts.nodeId)\n\t\t\t\t\t\t.usrId(opts.usrId)\n\t\t\t\t\t\t.taskId(opts.taskId); // optional - not used\n\t\tvar jmsg = this.jclient.userReq(this.connId, engports.cheapflow, cheapReq);\n\t\tthis.jclient.commit(jmsg, opts.onok, function (c, d) {\n\t\t\tif (typeof opts.onerror === 'function')\n\t\t\t\topts.onerror(c, d);\n\t\t\telse EasyMsger.error(c, d);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**Post a workflow starting request.\n\t * @param {CheapReq} cheapReq the request body\n\t * @param {object} opts options<br>\n\t * opts.taskId {string}: (Optional) task id (bussiness form record id)<br>\n\t * opts.onok {function}: on ok callback<br>\n\t * @return {CheapClient} this\n\t */\n\tstart (cheapReq, opts) {\n\t\tcheapReq.a(this.cheapReq.start)\t// this.cheapReq is the req enum\n\t\t\t\t.taskId(opts.taskId)\n\t\tvar jmsg = this.jclient.userReq(this.connId, engports.cheapflow, cheapReq);\n\t\tthis.jclient.commit(jmsg, opts.onok, function (c, d) {\n\t\t\tif (typeof opts.onerror === 'function')\n\t\t\t\topts.onerror(c, d);\n\t\t\telse if (c === CheapCode.err_rights)\n\t\t\t\tEasyMsger.alert(EasyMsger.m.cheap_no_rights);\n\t\t\telse\n\t\t\t\tEasyMsger.error(c, d);\n\t\t});\n\t\treturn this;\n\t}\n\n\tstep (cheapBody, opts) {\n\t\tcheapBody.a(this.cheapReq.cmd);\n\t\tvar jmsg = this.jclient.userReq(this.connId, engports.cheapflow, cheapBody);\n\t\tthis.jclient.commit(jmsg, opts.onok, opts.onerror);\n\t}\n\n\trights (wfid, taskId, currentNodeId, usrId, opts) {\n\t\tvar req = new CheapReq(this.jclient, this.cheaport)\n\t\t\t\t\t\t.a(this.cheapReq.load)\n\t\t\t\t\t\t.arg('wfId', wfid)\n\t\t\t\t\t\t.arg('taskId', taskId)\n\t\t\t\t\t\t.arg('currentNode', currentNodeId)\n\t\t\t\t\t\t.arg('usrId', usrId);\n\t\tthis.jclient.commit(req, opts.onok);\n\t}\n}\n\nexport {CheapClient};\n","\nimport $ from 'jquery';\nimport {Protocol, AnsonMsg, AnHeader, QueryReq, UserReq} from '../../protocol.js';\n\n/**See semantic.workflow/io.odysz.sworkflow.EnginDesign.Req */\nconst chpEnumReq = {\n\theartbeat: \"ping\",\n\t/** load workflow list */\n\tload: \"load\",\n\t/** load a node's commnads */\n\tnodeCmds: 'nodeCmds',\n\tTgetDef: \"get-def\",\n\tfindRoute: \"findroute\",\n\tcmdsRight: \"right\",\n\t/** client use this to ask plausible operation using 't' */\n\tTtest: \"test\",\n\tstart: \"start\",\n\t/**request stepping according to cmds configured in oz_wfcmds */\n\tcmd: \"cmd\",\n\tclose: \"close\",\n\ttimeout: \"timeout\",\n}\n\n/** @See io.odysz.sworkflow.CheapException */\nconst CheapCode = {\n\tok: 'ok',\n\n\terr: 'wf_err',\n\n\terr_rights: 'wf_err_rights',\n\n\terr_competation: 'wf_err_competing',\n\n\terr_internal: \"wf_err_internal\",\n\n\terr_config: \"wf_err_config\",\n}\n\n///////////////// io.odysz.sworkflow ///////////////////////////////////////////\nclass CheapReq {\n\tconstructor (wftype, port) {\n\t\tthis.wftype = wftype;\n\t\tif (port === undefined)\n\t\t\tthis.port = 'cheapflow.sample';\n\t\telse this.port = port;\n\t}\n\n\t/**set a.<br>\n\t * a() can only been called once.\n\t * @param {string} a\n\t * @return {UserReq} this */\n\ta(a) {\n\t\tthis.a = a;\n\t\treturn this;\n\t}\n\n\tcmd(c) {\n\t\tthis.cmd = c;\n\t\treturn this;\n\t}\n\n\targ(n, v) {\n\t\tif (v !== undefined) { // getting\n\t\t\tif (this.cmdArgs === undefined)\n\t\t\t\tthis.cmdArgs = {};\n\t\t\t// this.cmdArgs = Object.assign(this.cmdArgs, {n, v});\n\t\t\tthis.cmdArgs[n] = v;\n\t\t\treturn this;\n\t\t}\n\t\telse {\n\t\t\tif (this.cmdArgs === undefined) return;\n\t\t\t// for (var ix = 0; ix < this.cmdArgs.length; ix++) {\n\t\t\t// \tif (this.cmdArgs[ix][0] === n)\n\t\t\t// \t\treturn this.cmdArgs[ix][1];\n\t\t\t// }\n\t\t\treturn this.cmdArgs[n];\n\t\t}\n\t}\n\n\t/**Add descriptiong to node instance (e.g. task_nodes.descpt)\n\t * @param {string} descript descriptions\n\t * @return {CheapReq} this*/\n\tinstDesc (descpt) {\n\t\tthis.instDescpt = descpt;\n\t\treturn this;\n\t}\n\n\ttaskNv (n, v) {\n\t\tif (this.taskNvs === undefined || this.taskNvs === null)\n\t\t\tthis.taskNvs = [];\n\t\tthis.taskNvs.push([n, v]);\n\t\treturn this;\n\t}\n\n\ttaskRow (row) {\n\t\tif (Array.isArray(row)) {\n\t\t\tfor (var ix = 0; ix < row.length && Array.isArray(row[ix]); ix++) {\n\t\t\t\tthis.taskNv(row[ix][0], row[ix][1]);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tconsole.error('CheapReq.taskRow(row) argument format:\\n',\n\t\t\t\t\t\t'[[n, v], ...]\\n',\n\t\t\t\t\t\trow);\n\t\t}\n\t\treturn this;\n\t}\n\n\ttaskId (tid) {\n\t\treturn this.arg('taskId', tid);\n\t}\n\n\tnodeId (nid) {\n\t\treturn this.arg('nodeId', nid);\n\t}\n\n\tinstId (iid) {\n\t\treturn this.arg('instId', iid);\n\t}\n\n\tusrId (uid) {\n\t\treturn this.arg('usrId', uid);\n\t}\n\n\t// /**Add a post update request to the transact batch operations\n\t//  * @param {UpdateReq | InsertReq} jbody post request\n\t//  * @return {CheapReq} this*/\n\t// post (jbody) {\n\t// \t// FIXME there is no such thing in CheapReq.java\n\t// \tif (this.childInserts === undefined || this.childInserts === null)\n\t// \t\tthis.childInserts = [];\n\t// \telse this.childInserts.push(jbody);\n\t// \treturn this;\n\t// }\n\n\t/**Add post operation\n\t * @param {UpdateReq | InsertReq} pst post request\n\t * @return {UpdateReq} this */\n\tpost (pst) {\n\t\tif (pst === undefined) {\n\t\t\tconsole.warn('You really wanna an undefined post operation?');\n\t\t\treturn this;\n\t\t}\n\t\telse if (typeof pst.version === 'string' && typeof pst.seq === 'number')\n\t\t\tconsole.warn('You pobably adding a AnsonMsg as post operation? It should only be AnsonBody(s).');\n\n\t\tif (this.postUpds === undefined) {\n\t\t\tthis.postUpds = [];\n\t\t}\n\t\tif (Array.isArray(pst)) {\n\t\t\tthis.postUpds = this.postUpds.concat(pst);\n\t\t}\n\t\telse {\n\t\t\tthis.postUpds.push(pst);\n\t\t}\n\t\treturn this;\n\t}\n\n\t// FIXME\n\tchildInsert (n, v) {\n\t\t// FIXME call post() instead\n\t\tthis.childInserts[this.childInserts.length - 1].push([n, v]);\n\t\treturn this;\n\t}\n}\n\nexport {CheapReq, chpEnumReq, CheapCode};\n","\"use strict\";\n\nexport default\nfunction (root) {\n\n    function checkInt(value) {\n        return (parseInt(value) === value);\n    }\n\n    function checkInts(arrayish) {\n        if (!checkInt(arrayish.length)) { return false; }\n\n        for (var i = 0; i < arrayish.length; i++) {\n            if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function coerceArray(arg, copy) {\n\n        // ArrayBuffer view\n        if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === 'Uint8Array') {\n\n            if (copy) {\n                if (arg.slice) {\n                    arg = arg.slice();\n                } else {\n                    arg = Array.prototype.slice.call(arg);\n                }\n            }\n\n            return arg;\n        }\n\n        // It's an array; check it is a valid representation of a byte\n        if (Array.isArray(arg)) {\n            if (!checkInts(arg)) {\n                throw new Error('Array contains invalid value: ' + arg);\n            }\n\n            return new Uint8Array(arg);\n        }\n\n        // Something else, but behaves like an array (maybe a Buffer? Arguments?)\n        if (checkInt(arg.length) && checkInts(arg)) {\n            return new Uint8Array(arg);\n        }\n\n        throw new Error('unsupported array-like object');\n    }\n\n    function createArray(length) {\n        return new Uint8Array(length);\n    }\n\n    function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {\n        if (sourceStart != null || sourceEnd != null) {\n            if (sourceArray.slice) {\n                sourceArray = sourceArray.slice(sourceStart, sourceEnd);\n            } else {\n                sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);\n            }\n        }\n        targetArray.set(sourceArray, targetStart);\n    }\n\n\n\n    var convertUtf8 = (function() {\n        function toBytes(text) {\n            var result = [], i = 0;\n            text = encodeURI(text);\n            while (i < text.length) {\n                var c = text.charCodeAt(i++);\n\n                // if it is a % sign, encode the following 2 bytes as a hex value\n                if (c === 37) {\n                    result.push(parseInt(text.substr(i, 2), 16))\n                    i += 2;\n\n                // otherwise, just the actual byte\n                } else {\n                    result.push(c)\n                }\n            }\n\n            return coerceArray(result);\n        }\n\n        function fromBytes(bytes) {\n            var result = [], i = 0;\n\n            while (i < bytes.length) {\n                var c = bytes[i];\n\n                if (c < 128) {\n                    result.push(String.fromCharCode(c));\n                    i++;\n                } else if (c > 191 && c < 224) {\n                    result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));\n                    i += 2;\n                } else {\n                    result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));\n                    i += 3;\n                }\n            }\n\n            return result.join('');\n        }\n\n        return {\n            toBytes: toBytes,\n            fromBytes: fromBytes,\n        }\n    })();\n\n    var convertHex = (function() {\n        function toBytes(text) {\n            var result = [];\n            for (var i = 0; i < text.length; i += 2) {\n                result.push(parseInt(text.substr(i, 2), 16));\n            }\n\n            return result;\n        }\n\n        // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html\n        var Hex = '0123456789abcdef';\n\n        function fromBytes(bytes) {\n                var result = [];\n                for (var i = 0; i < bytes.length; i++) {\n                    var v = bytes[i];\n                    result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);\n                }\n                return result.join('');\n        }\n\n        return {\n            toBytes: toBytes,\n            fromBytes: fromBytes,\n        }\n    })();\n\n\n    // Number of rounds by keysize\n    var numberOfRounds = {16: 10, 24: 12, 32: 14}\n\n    // Round constant words\n    var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];\n\n    // S-box and Inverse S-box (S is for Substitution)\n    var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];\n    var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];\n\n    // Transformations for encryption\n    var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];\n    var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];\n    var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];\n    var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];\n\n    // Transformations for decryption\n    var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];\n    var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];\n    var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];\n    var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];\n\n    // Transformations for decryption key expansion\n    var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];\n    var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];\n    var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];\n    var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];\n\n    function convertToInt32(bytes) {\n        var result = [];\n        for (var i = 0; i < bytes.length; i += 4) {\n            result.push(\n                (bytes[i    ] << 24) |\n                (bytes[i + 1] << 16) |\n                (bytes[i + 2] <<  8) |\n                 bytes[i + 3]\n            );\n        }\n        return result;\n    }\n\n    var AES = function(key) {\n        if (!(this instanceof AES)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        Object.defineProperty(this, 'key', {\n            value: coerceArray(key, true)\n        });\n\n        this._prepare();\n    }\n\n\n    AES.prototype._prepare = function() {\n\n        var rounds = numberOfRounds[this.key.length];\n        if (rounds == null) {\n            throw new Error('invalid key size (must be 16, 24 or 32 bytes)');\n        }\n\n        // encryption round keys\n        this._Ke = [];\n\n        // decryption round keys\n        this._Kd = [];\n\n        for (var i = 0; i <= rounds; i++) {\n            this._Ke.push([0, 0, 0, 0]);\n            this._Kd.push([0, 0, 0, 0]);\n        }\n\n        var roundKeyCount = (rounds + 1) * 4;\n        var KC = this.key.length / 4;\n\n        // convert the key into ints\n        var tk = convertToInt32(this.key);\n\n        // copy values into round key arrays\n        var index;\n        for (var i = 0; i < KC; i++) {\n            index = i >> 2;\n            this._Ke[index][i % 4] = tk[i];\n            this._Kd[rounds - index][i % 4] = tk[i];\n        }\n\n        // key expansion (fips-197 section 5.2)\n        var rconpointer = 0;\n        var t = KC, tt;\n        while (t < roundKeyCount) {\n            tt = tk[KC - 1];\n            tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^\n                      (S[(tt >>  8) & 0xFF] << 16) ^\n                      (S[ tt        & 0xFF] <<  8) ^\n                       S[(tt >> 24) & 0xFF]        ^\n                      (rcon[rconpointer] << 24));\n            rconpointer += 1;\n\n            // key expansion (for non-256 bit)\n            if (KC != 8) {\n                for (var i = 1; i < KC; i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n\n            // key expansion for 256-bit keys is \"slightly different\" (fips-197)\n            } else {\n                for (var i = 1; i < (KC / 2); i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n                tt = tk[(KC / 2) - 1];\n\n                tk[KC / 2] ^= (S[ tt        & 0xFF]        ^\n                              (S[(tt >>  8) & 0xFF] <<  8) ^\n                              (S[(tt >> 16) & 0xFF] << 16) ^\n                              (S[(tt >> 24) & 0xFF] << 24));\n\n                for (var i = (KC / 2) + 1; i < KC; i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n            }\n\n            // copy values into round key arrays\n            var i = 0, r, c;\n            while (i < KC && t < roundKeyCount) {\n                r = t >> 2;\n                c = t % 4;\n                this._Ke[r][c] = tk[i];\n                this._Kd[rounds - r][c] = tk[i++];\n                t++;\n            }\n        }\n\n        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)\n        for (var r = 1; r < rounds; r++) {\n            for (var c = 0; c < 4; c++) {\n                tt = this._Kd[r][c];\n                this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^\n                                  U2[(tt >> 16) & 0xFF] ^\n                                  U3[(tt >>  8) & 0xFF] ^\n                                  U4[ tt        & 0xFF]);\n            }\n        }\n    }\n\n    AES.prototype.encrypt = function(plaintext) {\n        if (plaintext.length != 16) {\n            throw new Error('invalid plaintext size (must be 16 bytes)');\n        }\n\n        var rounds = this._Ke.length - 1;\n        var a = [0, 0, 0, 0];\n\n        // convert plaintext to (ints ^ key)\n        var t = convertToInt32(plaintext);\n        for (var i = 0; i < 4; i++) {\n            t[i] ^= this._Ke[0][i];\n        }\n\n        // apply round transforms\n        for (var r = 1; r < rounds; r++) {\n            for (var i = 0; i < 4; i++) {\n                a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^\n                        T2[(t[(i + 1) % 4] >> 16) & 0xff] ^\n                        T3[(t[(i + 2) % 4] >>  8) & 0xff] ^\n                        T4[ t[(i + 3) % 4]        & 0xff] ^\n                        this._Ke[r][i]);\n            }\n            t = a.slice();\n        }\n\n        // the last round is special\n        var result = createArray(16), tt;\n        for (var i = 0; i < 4; i++) {\n            tt = this._Ke[rounds][i];\n            result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n            result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n            result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;\n            result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;\n        }\n\n        return result;\n    }\n\n    AES.prototype.decrypt = function(ciphertext) {\n        if (ciphertext.length != 16) {\n            throw new Error('invalid ciphertext size (must be 16 bytes)');\n        }\n\n        var rounds = this._Kd.length - 1;\n        var a = [0, 0, 0, 0];\n\n        // convert plaintext to (ints ^ key)\n        var t = convertToInt32(ciphertext);\n        for (var i = 0; i < 4; i++) {\n            t[i] ^= this._Kd[0][i];\n        }\n\n        // apply round transforms\n        for (var r = 1; r < rounds; r++) {\n            for (var i = 0; i < 4; i++) {\n                a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^\n                        T6[(t[(i + 3) % 4] >> 16) & 0xff] ^\n                        T7[(t[(i + 2) % 4] >>  8) & 0xff] ^\n                        T8[ t[(i + 1) % 4]        & 0xff] ^\n                        this._Kd[r][i]);\n            }\n            t = a.slice();\n        }\n\n        // the last round is special\n        var result = createArray(16), tt;\n        for (var i = 0; i < 4; i++) {\n            tt = this._Kd[rounds][i];\n            result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n            result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n            result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;\n            result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;\n        }\n\n        return result;\n    }\n\n\n    /**\n     *  Mode Of Operation - Electonic Codebook (ECB)\n     */\n    var ModeOfOperationECB = function(key) {\n        if (!(this instanceof ModeOfOperationECB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Electronic Code Block\";\n        this.name = \"ecb\";\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationECB.prototype.encrypt = function(plaintext) {\n        plaintext = coerceArray(plaintext);\n\n        if ((plaintext.length % 16) !== 0) {\n            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n        }\n\n        var ciphertext = createArray(plaintext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < plaintext.length; i += 16) {\n            copyArray(plaintext, block, 0, i, i + 16);\n            block = this._aes.encrypt(block);\n            copyArray(block, ciphertext, i);\n        }\n\n        return ciphertext;\n    }\n\n    ModeOfOperationECB.prototype.decrypt = function(ciphertext) {\n        ciphertext = coerceArray(ciphertext);\n\n        if ((ciphertext.length % 16) !== 0) {\n            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n        }\n\n        var plaintext = createArray(ciphertext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < ciphertext.length; i += 16) {\n            copyArray(ciphertext, block, 0, i, i + 16);\n            block = this._aes.decrypt(block);\n            copyArray(block, plaintext, i);\n        }\n\n        return plaintext;\n    }\n\n\n    /**\n     *  Mode Of Operation - Cipher Block Chaining (CBC)\n     */\n    var ModeOfOperationCBC = function(key, iv) {\n        if (!(this instanceof ModeOfOperationCBC)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Cipher Block Chaining\";\n        this.name = \"cbc\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 bytes)');\n        }\n\n        this._lastCipherblock = coerceArray(iv, true);\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCBC.prototype.encrypt = function(plaintext) {\n        plaintext = coerceArray(plaintext);\n\n        if ((plaintext.length % 16) !== 0) {\n            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n        }\n\n        var ciphertext = createArray(plaintext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < plaintext.length; i += 16) {\n            copyArray(plaintext, block, 0, i, i + 16);\n\n            for (var j = 0; j < 16; j++) {\n                block[j] ^= this._lastCipherblock[j];\n            }\n\n            this._lastCipherblock = this._aes.encrypt(block);\n            copyArray(this._lastCipherblock, ciphertext, i);\n        }\n\n        return ciphertext;\n    }\n\n    ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {\n        ciphertext = coerceArray(ciphertext);\n\n        if ((ciphertext.length % 16) !== 0) {\n            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n        }\n\n        var plaintext = createArray(ciphertext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < ciphertext.length; i += 16) {\n            copyArray(ciphertext, block, 0, i, i + 16);\n            block = this._aes.decrypt(block);\n\n            for (var j = 0; j < 16; j++) {\n                plaintext[i + j] = block[j] ^ this._lastCipherblock[j];\n            }\n\n            copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);\n        }\n\n        return plaintext;\n    }\n\n\n    /**\n     *  Mode Of Operation - Cipher Feedback (CFB)\n     */\n    var ModeOfOperationCFB = function(key, iv, segmentSize) {\n        if (!(this instanceof ModeOfOperationCFB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Cipher Feedback\";\n        this.name = \"cfb\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 size)');\n        }\n\n        if (!segmentSize) { segmentSize = 1; }\n\n        this.segmentSize = segmentSize;\n\n        this._shiftRegister = coerceArray(iv, true);\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCFB.prototype.encrypt = function(plaintext) {\n        if ((plaintext.length % this.segmentSize) != 0) {\n            throw new Error('invalid plaintext size (must be segmentSize bytes)');\n        }\n\n        var encrypted = coerceArray(plaintext, true);\n\n        var xorSegment;\n        for (var i = 0; i < encrypted.length; i += this.segmentSize) {\n            xorSegment = this._aes.encrypt(this._shiftRegister);\n            for (var j = 0; j < this.segmentSize; j++) {\n                encrypted[i + j] ^= xorSegment[j];\n            }\n\n            // Shift the register\n            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n            copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n        }\n\n        return encrypted;\n    }\n\n    ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {\n        if ((ciphertext.length % this.segmentSize) != 0) {\n            throw new Error('invalid ciphertext size (must be segmentSize bytes)');\n        }\n\n        var plaintext = coerceArray(ciphertext, true);\n\n        var xorSegment;\n        for (var i = 0; i < plaintext.length; i += this.segmentSize) {\n            xorSegment = this._aes.encrypt(this._shiftRegister);\n\n            for (var j = 0; j < this.segmentSize; j++) {\n                plaintext[i + j] ^= xorSegment[j];\n            }\n\n            // Shift the register\n            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n            copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n        }\n\n        return plaintext;\n    }\n\n    /**\n     *  Mode Of Operation - Output Feedback (OFB)\n     */\n    var ModeOfOperationOFB = function(key, iv) {\n        if (!(this instanceof ModeOfOperationOFB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Output Feedback\";\n        this.name = \"ofb\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 bytes)');\n        }\n\n        this._lastPrecipher = coerceArray(iv, true);\n        this._lastPrecipherIndex = 16;\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationOFB.prototype.encrypt = function(plaintext) {\n        var encrypted = coerceArray(plaintext, true);\n\n        for (var i = 0; i < encrypted.length; i++) {\n            if (this._lastPrecipherIndex === 16) {\n                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);\n                this._lastPrecipherIndex = 0;\n            }\n            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];\n        }\n\n        return encrypted;\n    }\n\n    // Decryption is symetric\n    ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;\n\n\n    /**\n     *  Counter object for CTR common mode of operation\n     */\n    var Counter = function(initialValue) {\n        if (!(this instanceof Counter)) {\n            throw Error('Counter must be instanitated with `new`');\n        }\n\n        // We allow 0, but anything false-ish uses the default 1\n        if (initialValue !== 0 && !initialValue) { initialValue = 1; }\n\n        if (typeof(initialValue) === 'number') {\n            this._counter = createArray(16);\n            this.setValue(initialValue);\n\n        } else {\n            this.setBytes(initialValue);\n        }\n    }\n\n    Counter.prototype.setValue = function(value) {\n        if (typeof(value) !== 'number' || parseInt(value) != value) {\n            throw new Error('invalid counter value (must be an integer)');\n        }\n\n        // We cannot safely handle numbers beyond the safe range for integers\n        if (value > Number.MAX_SAFE_INTEGER) {\n            throw new Error('integer value out of safe range');\n        }\n\n        for (var index = 15; index >= 0; --index) {\n            this._counter[index] = value % 256;\n            value = parseInt(value / 256);\n        }\n    }\n\n    Counter.prototype.setBytes = function(bytes) {\n        bytes = coerceArray(bytes, true);\n\n        if (bytes.length != 16) {\n            throw new Error('invalid counter bytes size (must be 16 bytes)');\n        }\n\n        this._counter = bytes;\n    };\n\n    Counter.prototype.increment = function() {\n        for (var i = 15; i >= 0; i--) {\n            if (this._counter[i] === 255) {\n                this._counter[i] = 0;\n            } else {\n                this._counter[i]++;\n                break;\n            }\n        }\n    }\n\n\n    /**\n     *  Mode Of Operation - Counter (CTR)\n     */\n    var ModeOfOperationCTR = function(key, counter) {\n        if (!(this instanceof ModeOfOperationCTR)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Counter\";\n        this.name = \"ctr\";\n\n        if (!(counter instanceof Counter)) {\n            counter = new Counter(counter)\n        }\n\n        this._counter = counter;\n\n        this._remainingCounter = null;\n        this._remainingCounterIndex = 16;\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCTR.prototype.encrypt = function(plaintext) {\n        var encrypted = coerceArray(plaintext, true);\n\n        for (var i = 0; i < encrypted.length; i++) {\n            if (this._remainingCounterIndex === 16) {\n                this._remainingCounter = this._aes.encrypt(this._counter._counter);\n                this._remainingCounterIndex = 0;\n                this._counter.increment();\n            }\n            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];\n        }\n\n        return encrypted;\n    }\n\n    // Decryption is symetric\n    ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;\n\n\n    ///////////////////////\n    // Padding\n\n    // See:https://tools.ietf.org/html/rfc2315\n    function pkcs7pad(data) {\n        data = coerceArray(data, true);\n        var padder = 16 - (data.length % 16);\n        var result = createArray(data.length + padder);\n        copyArray(data, result);\n        for (var i = data.length; i < result.length; i++) {\n            result[i] = padder;\n        }\n        return result;\n    }\n\n    function pkcs7strip(data) {\n        data = coerceArray(data, true);\n        if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }\n\n        var padder = data[data.length - 1];\n        if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }\n\n        var length = data.length - padder;\n        for (var i = 0; i < padder; i++) {\n            if (data[length + i] !== padder) {\n                throw new Error('PKCS#7 invalid padding byte');\n            }\n        }\n\n        var result = createArray(length);\n        copyArray(data, result, 0, 0, length);\n        return result;\n    }\n\n    ///////////////////////\n    // Exporting\n\n\n    // The block cipher\n    var aesjs = {\n        AES: AES,\n        Counter: Counter,\n\n        ModeOfOperation: {\n            ecb: ModeOfOperationECB,\n            cbc: ModeOfOperationCBC,\n            cfb: ModeOfOperationCFB,\n            ofb: ModeOfOperationOFB,\n            ctr: ModeOfOperationCTR\n        },\n\n        utils: {\n            hex: convertHex,\n            utf8: convertUtf8\n        },\n\n        padding: {\n            pkcs7: {\n                pad: pkcs7pad,\n                strip: pkcs7strip\n            }\n        },\n\n        _arrayTest: {\n            coerceArray: coerceArray,\n            createArray: createArray,\n            copyArray: copyArray,\n        }\n    };\n\n\n\t/*\n    // node.js\n    if (typeof exports !== 'undefined') {\n        module.exports = aesjs\n\n    // RequireJS/AMD\n    // http://www.requirejs.org/docs/api.html\n    // https://github.com/amdjs/amdjs-api/wiki/AMD\n    } else if (typeof(define) === 'function' && define.amd) {\n        define(aesjs);\n\n    // Web Browsers\n    } else {\n\n        // If there was an existing library at \"aesjs\" make sure it's still available\n        if (root.aesjs) {\n            aesjs._aesjs = root.aesjs;\n        }\n\n        root.aesjs = aesjs;\n    }*/\n\n\n        root.aesjs = aesjs;\n}// )(this);\n","/**Json protocol helper to support jclient.\n * All AnsonBody and JHelper static helpers are here. */\nclass Protocol {\n  /**Globally set this client's options.\n   * @param {object} options<br>\n   * options.noNull no null value <br>\n   * options.noBoolean no boolean value<br>\n   */\n\tstatic opts(options) {\n\t\tif (options) {\n\t\t\tif (options.noNull !== undefined)\n\t\t\t\tProtocol.valOptions.noNull = options.noNull === true || options.noNull === 'true';\n\t\t\tif (options.noBoolean !== undefined)\n\t\t\t\tProtocol.valOptions.noBoolean = options.noBoolean === true || options.noBoolean === 'true';\n\n\t\t\tProtocol.valOptions = Object.assign(Protocol.valOptions, options);\n\t\t}\n\t}\n\n\t/**Format login request message.\n\t * @param {string} uid\n\t * @param {string} tk64\n\t * @param {string} iv64\n\t * @return login request message\n\t */\n\tstatic formatSessionLogin (uid, tk64, iv64) {\n\t\tvar body = new SessionReq(uid, tk64, iv64);\n\t\tbody.a = 'login';\n\t\treturn new AnsonMsg(Protocol.Port.session, null, body);\n\t}\n\n\tstatic formatHeader (ssInf) {\n\t\treturn new AnHeader(ssInf.ssid, ssInf.uid);\n\t}\n\n\tstatic rs2arr (rs) {\n\t\treturn AnsonResp.rs2arr(rs);\n\t\t// var cols = [];\n\t\t// var rows = [];\n\t\t// rs.forEach((r, rx) => {\n\t\t// \tif (rx === 0) {\n\t\t// \t\tcols = r;\n\t\t// \t}\n\t\t// \telse {\n\t\t// \t\trw = {};\n\t\t// \t\tr.forEach((c, cx) => {\n\t\t// \t\t\trw[cols[cx]] = c;\n\t\t// \t\t})\n\t\t// \t\trows.push(rw);\n\t\t// \t}\n\t\t// });\n\t\t//\n\t\t// return rows;\n\t}\n\n\tstatic nv2cell (nv) {\n\t\treturn [nv.name, nv.value];\n\t}\n\n\tstatic nvs2row (nvs) {\n\t\tvar row = [];\n\t\tif (nvs) {\n\t\t\tfor (var ix = 0; ix < nvs.length; ix++)\n\t\t\t\trow.push(this.nv2cell(nvs[ix]));\n\t\t}\n\t\treturn row;\n\t}\n\n\t/** convert [{name, value}, ...] to [n1, n2, ...]\n\t * @param {Array} [n-v, ...]\n\t * @return {Array} [n1, n2, ...]\n\t */\n\tstatic nvs2cols(nvArr) {\n\t\tvar cols = [];\n\t\tif (nvArr) {\n\t\t\tfor (var ix = 0; ix < nvArr.length; ix++) {\n\t\t\t\tif (nvArr[ix].name) {\n\t\t\t\t\tcols.push(nvArr[ix].name);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tcols.push(ix);\n\t\t\t}\n\t\t}\n\t\treturn cols;\n\t}\n\n\t/** convert [[{name, value}]] to [[[name, value]]]\n\t * @param {Array} 2d array of n-v pairs\n\t * @return {Array} 3d array that can be used by server as nv rows\n\t */\n\tstatic nvs2rows(nvs) {\n\t\tvar rows = [];\n\t\tif(nvs) {\n\t\t\tfor (var ix = 0; ix < nvs.length; ix++)\n\t\t\t\t// Ix.nvn = 0; Ix.nvv = 1\n\t\t\t\t// rows.push([nvs[ix].name, nvs[ix].value]);\n\t\t\t\trows.push(this.nvs2row(nvs[ix]));\n\t\t}\n\t\treturn rows;\n\t}\n} ;\n\n/** Static methods of Protocol */\n{\n\tProtocol.CRUD = {c: 'I', r: 'R', u: 'U', d: 'D'};\n\n\tProtocol.Port = {\theartbeat: \"ping.serv11\", echo: \"echo.serv11\", session: \"login.serv11\",\n\t\t\t\t\t\tquery: \"r.serv11\", update: \"u.serv11\",\n\t\t\t\t\t\tinsert: \"c.serv11\", delete: \"d.serv11\",\n\t\t\t\t\t\tdataset: \"ds.serv11\", stree: \"s-tree.serv11\" };\n\n\tProtocol.MsgCode = {ok: \"ok\", exSession: \"exSession\", exSemantic: \"exSemantic\",\n\t\t\t\t\t\texIo: \"exIo\", exTransct: \"exTransct\", exDA: \"exDA\",\n\t\t\t\t\t\texGeneral: \"exGeneral\"};\n\n\tProtocol.Notify = {changePswd: \"changePswd\", todos: \"todos\"};\n\n\tProtocol.cfg  = { ssInfo: \"ss-k\", };\n\n\tProtocol.Semantics = {\n\t\tchkCntDel: 'checkSqlCountOnDel',\n\t\tchkCntIns: 'checkSqlCountOnInsert',\n\t};\n\n\tProtocol.valOptions = {};\n}\n\n/** Regex helper */\nclass Jregex  {\n\t/**Add single quotes to str, if not yet.\n\t * @param {string} str\n\t * @return {string} quoted */\n\tstatic quote(str) {\n\t\tif (str === undefined || str === null )\n\t\t\tstr = \"''\";\n\t\telse if (typeof str === \"string\" && str.substring(0, 1) !== \"'\"\n\t\t\t&& str.substring(0, 2) != \"''\")\n\t\t\treturn \"'\" + str + \"'\";\n\t}\n\n\tstatic isblank(s) {\n\t\treturn s === undefined || s === null\n\t\t\t|| (typeof s === 'string' && s.trim() === '');\n\t}\n}\n\nclass AnsonMsg {\n\tconstructor (port, header, body) {\n\t\tthis.type = \"io.odysz.semantic.jprotocol.AnsonMsg\";\n\t\tthis.version = \"1.1\";\n\t\tthis.seq = Math.round(Math.random() * 1000);\n\n\t\t// string options, like no-null: true for asking server replace null with ''.\n\t\tthis.opts = Protocol.valOptions;\n\n\t\t/**Protocol.Port property name, use this name to get port url */\n\t\tthis.port = port; // for robustness?\n\t\tvar prts = Protocol.Port;\n\t\tvar msg = this;\n\t\tObject.getOwnPropertyNames(prts).forEach(function(val, idx, array) {\n\t\t\tif (prts[val] === port) {\n\t\t\t\t// console.log(val + ' -> ' + obj[val]);\n\t\t\t\tmsg.port = val;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\n\t\tif (header)\n\t\t\tthis.header = header;\n\t\telse this.header = {};\n\n\t\tthis.body = [];\n\t\t// this.body.push(body.parentMsg(this));\n\t\tthis.body.push(body);\n\t}\n\n\t/** A short cut for body[0].post()\n\t * @param {UpdateReq} pst post sql request\n\t * @return {UpdateReq} the  first request body[0].post returned value.*/\n\tpost(pst) {\n\t\tif (this.body !== undefined && this.body.length > 0)\n\t\t\treturn this.body[0].post(pst);\n\t}\n}\n\nclass AnHeader {\n\tconstructor (ssid, userId) {\n\t\tthis.type = \"io.odysz.semantic.jprotocol.AnsonHeader\";\n\t\tthis.ssid = ssid;\n\t\tthis.uid = userId;\n\t}\n\n\t/**Set user action (for DB log on DB transaction)\n\t * @param {object} act {funcId(tolerate func), remarks, cate, cmd}\n\t */\n\tuserAct (act) {\n\t\tthis.usrAct = [];\n\t\tthis.usrAct.push(act.func === undefined ? act.funcId : act.func);\n\t\tthis.usrAct.push(act.cate);\n\t\tthis.usrAct.push(act.cmd);\n\t\tthis.usrAct.push(act.remarks);\n\t}\n}\n\nclass UserReq {\n\tconstructor (conn, tabl) {\n\t\tthis.type = \"io.odysz.semantic.jserv.user.UserReq\";\n\t\tthis.conn = conn;\n\t\tthis.tabl = tabl\n\t\tthis.data = {};\n\t}\n\n\tget(prop) {\n\t\treturn this.data[prop];\n\t}\n\n\tset(prop, v) {\n\t\tthis.data[prop] = v;\n\t\treturn this;\n\t}\n\n\t/**set a.<br>\n\t * a() can only been called once.\n\t * @param {string} a\n\t * @return {UserReq} this */\n\ta(a) {\n\t\tthis.a = a;\n\t\treturn this;\n\t}\n}\n\nclass SessionReq {\n\tconstructor (uid, token, iv) {\n\t\tthis.type = \"io.odysz.semantic.jsession.AnSessionReq\";\n\t\tthis.uid = uid;\n\t\tthis.token = token;\n\t\tthis.iv = iv;\n\t}\n\n\t/**set a.<br>\n\t * a() can only been called once.\n\t * @param {string} a\n\t * @return {SessionReq} this */\n\ta(a) {\n\t\tthis.a = a;\n\t\treturn this;\n\t}\n\n\tmd(k, v) {\n\t\tif (this.mds === undefined)\n\t\t\tthis.mds = {};\n\t\tthis.mds[k] = v;\n\t\treturn this;\n\t}\n}\n\n/**Java equivalent: io.odysz.semantic.jserv.R.AnQueryReq\n * @class\n */\nclass QueryReq {\n\tconstructor (conn, tabl, alias, pageInf) {\n\t\tthis.type = \"io.odysz.semantic.jserv.R.AnQueryReq\";\n\t\tthis.conn = conn;\n\t\tthis.mtabl = tabl;\n\t\tthis.mAlias = alias;\n\t\tthis.exprs = [];\n\t\tthis.joins = [];\n\t\tthis.where = [];\n\n\t\tif (pageInf)\n\t\t\tthis.page(pageInf.size, pageInf.page);\n\t}\n\n\tpage (size, idx) {\n\t\tthis.page = idx;\n\t\tthis.pgSize = size;\n\t\treturn this;\n\t}\n\n\t/**add joins to the query request object\n\t * @param {string} jt join type, example: \"j\" for inner join, \"l\" for left outer join\n\t * @param {string} t table, example: \"a_roles\"\n\t * @param {string} a alias, example: \"r\"\n\t * @param {string} on on conditions, example: \"r.roleId = mtbl.roleId and mtbl.flag={@varName}\"\n\t * Variables are replaced at client side (by js)\n\t * @return this query object\n\t */\n\tjoin (jt, t, a, on) {\n\t\t// parse \"j:tbl:alias [conds]\"\n\t\tthis.joins.push([jt, t, a, on]);\n\t\treturn this;\n\t}\n\n\tj (tbl, alias, conds) {\n\t\treturn this.join(\"j\", tbl, alias, conds);\n\t}\n\n\tl (tbl, alias, conds) {\n\t\treturn this.join(\"l\", tbl, alias, conds);\n\t}\n\n\tr (tbl, alias, conds) {\n\t\treturn this.join(\"r\", tbl, alias, conds);\n\t}\n\n\tjoinss (js) {\n\t\tif (js !== undefined && js.length !== undefined)\n\t\t\tfor (var ix = 0; ix < js.length; ix++)\n\t\t\t\tthis.join(js[ix].t, js[ix].tabl, js[ix].as, js[ix].on);\n\t\treturn this;\n\t}\n\n\texpr (exp, as) {\n\t\tthis.exprs.push([exp, as]);\n\t\treturn this;\n\t}\n\n\texprss (exps) {\n\t\tif (exps !== undefined && exps.length !== undefined) {\n\t\t\tfor (var ix = 0; ix < exps.length; ix++) {\n\t\t\t\tif (exps[ix].exp !== undefined)\n\t\t\t\t\tthis.expr(exps[ix].exp, exps[ix].as);\n\t\t\t\telse if (exps[ix].length !== undefined)\n\t\t\t\t\tthis.expr(exps[ix][0], exps[ix][1]);\n\t\t\t\telse {\n\t\t\t\t\tconsole.error(`Can not parse expr [exp, as]: exprs[${ix}] = `,\n\t\t\t\t\t\texps[ix]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n    /**Add where clause condition\n     * @param {string} logic logic type\n     * @param {string} loper left operator\n     * @param {string} roper right operator\n     * @return {QueryReq} this */\n\twhereCond (logic, loper, roper) {\n\t\tif (Array.isArray(logic))\n\t\t\tthis.where = this.where.concat(logic);\n\t\telse if (logic !== undefined)\n\t\t\tthis.where.push([logic, loper, roper]);\n\t\treturn this;\n\t}\n\n\twhereEq (lopr, ropr) {\n\t\tthis.whereCond(\"=\", lopr, \"'\" + ropr + \"'\");\n\t}\n\n\torderby (tabl, col, asc) {\n\t\tif (this.orders === undefined)\n\t\t\tthis.orders = [];\n\t\tthis.orders.push([tabl, col, asc]);\n\t\treturn this;\n\t}\n\n\torderbys (cols) {\n\t\tif (Array.isArray(cols)) {\n\t\t\tfor (var ix = 0; ix < cols.length; ix++) {\n\t\t\t\tif (Array.isArray(cols[ix])) {\n\t\t\t\t\tif (this.orders === undefined)\n\t\t\t\t\t\tthis.orders = [];\n\t\t\t\t\tthis.orders.push(cols[ix]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.orderby(cols[ix].tabl, cols[ix].col, cols[ix].asc);\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t\telse if (cols) {\n\t\t\tconsole.log('QueryReq#orderbys() - argument is not an array.', cols);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tgroupby (expr) {\n\t\t// console.warn(\"groupby() is still to be implemented\");\n\t\tif (this.groups === undefined)\n\t\t\tthis.groups = [];\n\t\tthis.groups.push(expr);\n\t\treturn this;\n\t}\n\n\tgroupbys (exprss) {\n\t\t// console.warn(\"groupby() is still to be implemented\");\n\t\tif (Array.isArray(exprss)) {\n\t\t\tfor (var ix = 0; ix < exprss.length; ix++) {\n\t\t\t\tthis.groupby(exprss[ix]);\n\t\t\t}\n\t\t}\n\t\telse if (exprss != undefined) {\n            console.log('QueryReq#groupbys() - argument is not an array.', exprss);\n        }\n\t\treturn this;\n\t}\n\n\t/**limit clause.\n\t * @param {string} expr1\n\t * @param {string} expr2\n\t */\n\tlimit (expr1, expr2) {\n\t\tthis.limt = [];\n\t\tif (expr1)\n\t\t\tthis.limt.push(expr1);\n\n\t\tif (expr2)\n\t\t\tthis.limt.push(expr2);\n\t}\n\n\tcommit () {\n\t\tvar hd = this.formatHeader();\n\t\t// return { header: hd, tabls: froms, exprs: expr, conds: cond, orders: order, group: groupings};\n\t\treturn {header: hd,\n\t\t\t\tbody: [{a: \"R\",\n\t\t\t\t\t\texprs: this.exprs,\n\t\t\t\t\t\tf: this.mtbl,\n\t\t\t\t\t\tj: this.joinings,\n\t\t\t\t\t\tconds: this.cond,\n\t\t\t\t\t\torders: this.order,\n\t\t\t\t\t\tgroup: this.groupings}]};\n\t}\n}\n\nclass UpdateReq {\n\t/**Create an update / insert request.\n\t * @param {string} conn connection id\n\t * @param {string} tabl table\n\t * @param {object} pk {pk, v} conditions for pk.<br>\n\t * If pk is null, use this object's where_() | whereEq() | whereCond().\n\t */\n\tconstructor (conn, tabl, pk) {\n\t\tthis.type = \"io.odysz.semantic.jserv.U.AnUpdateReq\";\n\t\tthis.conn = conn;\n\t\tthis.mtabl = tabl;\n\t\tthis.nvs = [];\n\t\tthis.where = [];\n\t\tif (Array.isArray(pk))\n\t\t\tthis.where.push(pk);\n\t\telse if (typeof pk === \"object\")\n\t\t \tif (pk.pk !== undefined)\n\t\t\t\tthis.where.push([pk.pk, pk.v]);\n\t\t\telse console.error(\"UpdateReq: Can't understand pk: \", pk);\n\t}\n\n\t/** add n-v\n\t * @param {string} n\n\t * @param {object} v\n\t * TODO what about v is QueryReq ?\n\t * @return {UpdateReq} this\n\t */\n\tnv (n, v) {\n\t\tif (Array.isArray(n)) {\n\t\t\tthis.nvs = this.nvs.concat(Protocol.nvs2row(n));\n\t\t}\n\t\telse {\n\t\t\tthis.nvs.push([n, v]);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**Take exp as an expression\n\t * @param {string} n\n\t * @param {string} exp the expression string like \"3 * 2\"\n\t * @return {InsertReq} this*/\n\tnExpr (n, exp) {\n\t\treturn this.nv(n, {exp});\n\t}\n\n\t/**Append where clause condiont\n\t * @param {string} logic \"=\" | \"<>\" , ...\n\t * @param {string} loper left operand, typically a tabl.col.\n\t * @param {string} roper right operand, typically a string constant.\n\t * @return {UpdateReq} this */\n\twhereCond (logic, loper, roper) {\n\t\tif (Array.isArray(logic))\n\t\t\tthis.where = this.where.concat(logic);\n\t\telse if (logic !== undefined)\n\t\t\tthis.where.push([logic, loper, roper]);\n\t\treturn this;\n\t}\n\n\t/**Wrapper of #wherecodn(), will take rop as consts and add \"''\".<br>\n\t * whereCond(logic, lop, Jregex.quote(rop));\n\t * @param logic logic operator\n\t * @param lop left operand\n\t * @param rop right operand\n\t * @return {UpdateReq} this */\n\twhere_ (logic, lop, rop) {\n\t\treturn this.whereCond(logic, lop, Jregex.quote(rop));\n\t}\n\n\t/** A wrapper of where_(\"=\", lcol, rconst)\n\t * @param {string} lcol left operand,\n\t * @param {string} rconst right constant, will be quoted.\n\t * @return {UpdateReq} this */\n\twhereEq (lcol, rconst) {\n\t\treturn this.where_(\"=\", lcol, rconst);\n\t}\n\n\t/**limit clause.\n\t * @param {string} cnt count\n\t */\n\tlimit (cnt) {\n\t\tthis.limt = cnt;\n\t}\n\n\t/**Attach a file.\n\t * The u.serv will handle this in a default attachment table - configured in semantics\n\t * @param {string} fn file name (from the client locally)\n\t * @param {string} b64 base 64 encoded string\n\t * @return {UpdateReq} this\n\t */\n\tattach(fn, b64) {\n\t\tif (this.attacheds === undefined) {\n\t\t\tthis.attacheds = [];\n\t\t}\n\t\tthis.attacheds.push({fn: fn, b64: b64});\n\t\treturn this;\n\t}\n\n\t/**Add post operation\n\t * @param {UpdateReq | InsertReq} pst post request\n\t * @return {UpdateReq} this */\n\tpost (pst) {\n\t\tif (pst === undefined) {\n\t\t\tconsole.warn('You really wanna an undefined post operation?');\n\t\t\treturn this;\n\t\t}\n\t\telse if (typeof pst.version === 'string' && typeof pst.seq === 'number')\n\t\t\tconsole.warn('You pobably adding a AnsonMsg as post operation? It should only be AnsonBody(s).');\n\n\t\tif (this.postUpds === undefined) {\n\t\t\tthis.postUpds = [];\n\t\t}\n\t\tif (Array.isArray(pst)) {\n\t\t\tthis.postUpds = this.postUpds.concat(pst);\n\t\t}\n\t\telse {\n\t\t\tthis.postUpds.push(pst);\n\t\t}\n\t\treturn this;\n\t}\n}\n\nclass DeleteReq extends UpdateReq {\n\tconstructor (conn, tabl, pk) {\n\t\tsuper (conn, tabl, pk);\n\t\tthis.a = Protocol.CRUD.d;\n\t}\n}\n\nclass InsertReq extends UpdateReq {\n\tconstructor (conn, tabl) {\n\t\tsuper (conn, tabl);\n\t\tthis.type = \"io.odysz.semantic.jserv.U.AnInsertReq\";\n\t\tthis.a = Protocol.CRUD.c;\n\t}\n\n\tcolumns (cols) {\n\t\tif (this.cols === undefined)\n\t\t\tthis.cols = [];\n\t\tif (Array.isArray(cols)){\n\t\t\tthis.cols = this.cols.concat(cols);\n\t\t}\n\t\telse this.cols.push(cols);\n\t\treturn this;\n\t}\n\n\t/**Override Update.nv() - insert is using valus() for nvss.\n\t * @param {string} n\n\t * @param {string} v\n\t * @return {InsertReq} this*/\n\tnv (n, v) {\n\t\treturn this.valus(n, v);\n\t}\n\n\t/**Take exp as an expression\n\t * @param {string} n\n\t * @param {string} exp the expression string like \"3 * 2\"\n\t * @return {InsertReq} this*/\n\tnExpr(n, exp) {\n\t\treturn this.nv(n, {exp});\n\t}\n\n\t/**Set inserting value(s).\n\t * Becareful about function name - 'values' shall be reserved.\n\t * @param {string|Array} n_row field name or n-v array<br>\n\t * n_row can be typically return of jqueyr serializeArray, a.k.a [{name, value}, ...].<br>\n\t * Note:<br>\n\t * 1. Only one row on each calling.<br>\n\t * 2. Don't use both n-v mode and row mode, can't handle that.\n\t * @param {string} v value if n_row is name. Optional.\n\t * @return {InsertReq} this\n\t */\n\tvalus (n_row, v) {\n\t\tif (this.nvss === undefined)\n\t\t\tthis.nvss = [];\n\n\t\tvar warned = false;\n\t\tif (Array.isArray(n_row)) {\n\t\t\tif (Array.isArray(n_row[0])) {\n\t\t\t\t// already a 2-d array\n\t\t\t\tif (Array.isArray(n_row[0][0]) && !warned) {\n\t\t\t\t\tconsole.warn('InsertReq is trying to handle multi rows in on value call, it is wrong. You must use InsertReq.nvRows(rows) instead.',\n\t\t\t\t\t\t\tn_row);\n\t\t\t\t\twarned = true;\n\t\t\t\t\tthis.nvss = this.nvss.concat(n_row);\n\t\t\t\t}\n\t\t\t\telse {this.nvss = this.nvss.concat([n_row]);}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// guess as a n-v array\n\t\t\t\tif (this.cols === undefined)\n\t\t\t\t\tthis.columns(Protocol.nvs2cols(n_row));\n\t\t\t\tthis.nvss = this.nvss.concat([Protocol.nvs2row(n_row)]);\n\t\t\t}\n\t\t}\n\t\telse if (typeof n_row === 'string'){\n\t\t\tthis.columns(n_row);\n\t\t\tif (this.nvss.length == 0) {\n\t\t\t\tthis.nvss.push([[n_row, v]]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.nvss[0].push([n_row, v]);\n\t\t\t}\n\t\t}\n\t\telse console.error('Error when setting n-v with', n_row, v,\n\t\t\t'Check the type of n - only string for column, or n is an array represeting a row\\'s n-vs!');\n\t\treturn this;\n\t}\n\n\tnvRows(rows) {\n\t\tif (Array.isArray(rows)) {\n\t\t\tfor (var ix = 0; ix < rows.length && Array.isArray(rows[ix]); ix++) {\n\t\t\t\tthis.valus(rows[ix]);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n}\n\nclass AnsonResp {\n\t// TODO\n\t// TODO\n\tconstructor (response) {\n\n\t}\n\n\t/**Change rs object to array like [ {col1: val1, ...}, ... ]\n\t *\n\t * <b>Note</b> The column index and rows index shifted to starting at 0.\n\t *\n\t * @param {object} rs assume the same fields of io.odysz.module.rs.AnResultset.\n\t * @return {array} array like [ {col1: val1, ...}, ... ]\n\t */\n\tstatic rs2arr (rs) {\n\t\tlet cols = [];\n\t\tlet rows = [];\n\n\t\tif (typeof(rs.colnames) === 'object') {\n\t\t\t// rs with column index\n\t\t\tcols = new Array(rs.colnames.length);\n\t\t\tfor (var col in rs.colnames) {\n\t\t\t\t// e.g. col = \"VID\": [ 1, \"vid\" ],\n\t\t\t\tlet cx = rs.colnames[col][0] - 1;\n\t\t\t\tlet cn = rs.colnames[col][1];\n\t\t\t\tcols[cx] = cn;\n\t\t\t}\n\n\t\t\trs.results.forEach((r, rx) => {\n\t\t\t\tlet rw = {};\n\t\t\t\tr.forEach((c, cx) => {\n\t\t\t\t\trw[cols[cx]] = c;\n\t\t\t\t});\n\t\t\t\trows.push(rw);\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\t// first line as column index\n\t\t\trs.forEach((r, rx) => {\n\t\t\t\tif (rx === 0) {\n\t\t\t\t\tcols = r;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\trw = {};\n\t\t\t\t\tr.forEach((c, cx) => {\n\t\t\t\t\t\trw[cols[cx]] = c;\n\t\t\t\t\t});\n\t\t\t\t\trows.push(rw);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn rows;\n\t}\n}\n\n///////////////// io.odysz.semantic.ext ////////////////////////////////////////\n/** define t that can be understood by stree.serv */\nconst stree_t = {\n\t/** load dataset configured and format into tree with semantics defined by sk. */\n\tsqltree: 'sqltree',\n\t/** Reformat the tree structure - reformat the 'fullpath', from the root */\n\tretree: 'retree',\n\t/** Reformat the forest structure - reformat the 'fullpath', for the entire table */\n\treforest: 'reforest',\n\t/** Query with client provided QueryReq object, and format the result into tree. */\n\tquery: ''};\n\nclass DatasetCfg extends QueryReq {\n\t/**@param {string} conn JDBC connection id, configured at server/WEB-INF/connects.xml\n\t * @param {string} sk semantic key configured in WEB-INF/dataset.xml\n\t * @param {stree_t} t function branch tag (AnsonBody#a).\n\t * Can be only one of stree_t.sqltree, stree_t.retree, stree_t.reforest, stree_t.query\n\t * @param {object} args arguments to be formatted to sql args.\n\t * @param {string} maintbl if t is null or undefined, use this to replace maintbl in super (QueryReq), other than let it = sk.\n\t * @param {string} alias if t is null or undefined, use this to replace alias in super (QueryReq).\n\t */\n\tconstructor (conn, sk, t, args, maintbl, alias) {\n\t\tsuper(conn, Jregex.isblank(t) ? maintbl : sk, alias);\n\t\tthis.type = \"io.odysz.semantic.ext.AnDatasetReq\";\n\n\t\tthis.conn = conn;\n\t\tthis.sk = sk;\n\t\tthis.sqlArgs = args;\n\n\t\tthis._t(t);\n\t\tthis.checkt(t);\n\t}\n\n\tget geTreeSemtcs() { return this.trSmtcs; }\n\n\t/**Set tree semantics<br>\n\t * You are recommended not to use this except your are the semantic-* developer.\n\t * @param {TreeSemantics} semtcs */\n\ttreeSemtcs(semtcs) {\n\t\tthis.trSmtcs = semtcs;\n\t\treturn this;\n\t}\n\n\t_t(ask) {\n\t\tif (typeof sk === 'string' && sk.length > 0 && ask !== stree_t.sqltree) {\n\t\t\tconsole.warn('DatasetReq.a is ignored for sk is defined.', sk);\n\t\t\tthis.a = stree_t.sqltree;\n\t\t}\n\t\telse {\n\t\t\tthis.a = ask;\n\t\t\tthis.checkt(ask);\n\t\t}\n\t}\n\n\targs(args) {\n\t\tif (this.sqlArgs === undefined){\n\t\t\tthis.sqlArgs = [];\n\t\t}\n\n\t\tif (typeof args === 'string') {\n\t\t\tthis.sqlArgs = this.sqlArgs.concat([args]);\n\t\t}\n\t\telse if (Array.isArray(args)) {\n\t\t\tthis.sqlArgs = args;\n\t\t}\n\t\telse {\n\t\t\tconsole.error('sql args is not an arry: ', args);\n\t\t\tthis.sqlArgs = this.sqlArgs.concat(args);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/** Check is t can be undertood by s-tree.serv\n\t * @param {string} t*/\n\tcheckt(t) {\n\t\t// if (t !== stree_t.sqltree && t !== stree_t.retree && t !== stree_t.reforest) {\n\t\tif (t !== undefined && !stree_t.hasOwnProperty(t)) {\n\t\t\tconsole.warn(\"DatasetCfg.t won't been understood by server:\", t, \"Should be one of\", stree_t);\n\t\t}\n\t}\n}\n\n///////////////// END //////////////////////////////////////////////////////////\nexport {Jregex, Protocol, AnsonMsg, AnHeader,\n\tUserReq, SessionReq, QueryReq, UpdateReq, DeleteReq, InsertReq,\n\tAnsonResp, DatasetCfg, stree_t}\n","/** Example: Hello x-visual\n */\nimport * as an from 'anclient'\nimport * as xv from 'x-visual'\nimport {vec3conn, Jvector} from '../lib/jvector'\n\n/** Hollow XWorld Application.\n * add the user implemented system, Cube, into xworld, then show it.\n * @class\n */\nexport class App {\n\tconstructor(canv, serv) {\n\t\t// initialize a client of jsample\n\t\tthis.an = an.an;\n\t\tthis.an.init(serv ? serv : \"http://127.0.0.1:8080/jserv-sample\");\n\t\tthis.canv = canv;\n\t\tthis.ssClient = undefined;\n\t}\n\n\tload(onload) {\n\t\tlet that = this;\n\t\tif (!this.loggedin) {\n\t\t\tthis.an.login(\n\t\t\t\t\"admin\",  // user name\n\t\t\t\t\"123456\", // password (won't be sent on line - already set at server)\n\t\t\t\t// callback parameter is a session client initialized with session token\n\t\t\t\t// client.ssInf has session Id, token & user information got from server\n\t\t\t\treload,\n\t\t\t\tonError\n\t\t\t);\n\t\t}\n\t\telse reload(this.ssClient);\n\n\t\tfunction reload (client) {\n\t\t\tthat.ssClient = client;\n\t\t\tthat.loggedin = true;\n\n\t\t\t// load vectors from port vec3.serv\n\t\t\tlet jvector = new Jvector(client);\n\t\t\tjvector.getCubes(onload ? onload :\n\t\t\t\t(resp) => {\n\t\t\t\t\tconsole.log(jvector.vectorsOf(resp),\n\t\t\t\t\t\t\tjvector.x(resp), jvector.y(resp), jvector.z(resp));\n\t\t\t\t} );\n\t\t}\n\n\t\tfunction onError (code, resp) {\n\t\t\tif (code === an.Protocol.MsgCode.exIo)\n\t\t\t\talert('Network Failed!');\n\t\t\telse if (resp.body[0])\n\t\t\t\t// most likely MsgCode.exSession for password error\n\t\t\t\talert(resp.body[0].m);\n\t\t\telse console.error(resp);\n\t\t}\n\t}\n}\n","import {Protocol, UserReq, AnsonMsg} from \"anclient\"\n\nexport const vec3conn = \"raw-vec\";\n\nexport const examports = {\n\tvec3: 'vec3.serv'\n}\n\nconst vec_a = {\n\tvec: 'vec',\n\txyz: 'xyz',\n\tcube: 'cube'\n}\n\nexport\n/** Helper handling protocol / data type of vec3.serv */\nclass Jvector {\n\t/**@param {SessionClient} ssClient client created via login\n\t */\n\tconstructor (ssClient) {\n\t\tssClient.An.understandPorts(examports);\n\t\tthis.client = ssClient;\n\t\tthis.ssInf = ssClient.ssInf;\n\t}\n\n\tserv (a, onload) {\n\t\tlet reqVec3 = new UserReq(vec3conn)\n\t\t\t.a(a); // this is a reading request\n\n\t\tlet header = Protocol.formatHeader(this.ssInf);\n\n\t\t// for logging user action at server side.\n\t\tthis.client.usrAct({ func: 'query',\n\t\t\t\t\t\tcmd: 'select',\n\t\t\t\t\t\tcate: 'r',\n\t\t\t\t\t\tremarks: 'session query'});\n\n\t\tvar jreq = new AnsonMsg(Protocol.Port.vec3, header, reqVec3);\n\n\t\tthis.client.An.post(jreq, onload);\n\t\treturn jreq;\n\t}\n\n\tgetVectors (onload) {\n\t\tthis.serv(vec_a.vec, onload);\n\t}\n\n\t/**Data type parser for vec3.serv\n\t * @param {AnsonResp} respMsg\n\t * @return {array} [[{col1: val1, col2, val2, ...}, ...]]\n\t *<pre>\n      [{\"type\": \"io.odysz.semantic.jprotocol.AnsonResp\",\n        \"rs\": [{\"type\": \"io.odysz.module.rs.AnResultset\",\n                \"stringFormats\": null,\n                \"total\": 6,\n                \"rowCnt\": 6,\n                \"colCnt\": 2,\n                \"colnames\": {\n                    \"AMOUNT\": [ 1, \"amount\" ],\n                    \"AGE\": [ 2, \"age\" ]\n                },\n                \"rowIdx\": 0,\n                \"results\": [ [ 113, \"80-\" ], [ 100, \"80-\" ], [ 111, \"80-\" ],\n                    [ 206, \"80-\" ], [ 210, \"80-\" ], [ 106, \"80-\" ] ]\n            }\n        ],\n        \"parent\": \"io.odysz.semantic.jprotocol.AnsonMsg\",\n        \"a\": null,\n        \"conn\": null,\n        \"m\": null,\n        \"map\": null\n      }]</pre>\n\t */\n\tvectorsOf(respMsg) {\n\t\t// this.respObj = respMsg;\n\t\treturn Protocol.rs2arr(respMsg.body[0].rs[0]);\n\t}\n\n\n\tgetCubes (onload) {\n\t\tthis.serv(vec_a.cube, onload);\n\t}\n\t/**\n\t * @param {AnsonResp} respMsg\n\t * @return {object} [[{col1: val1, col2, val2, ...}, ...]]\n\t */\n\tcubesOf(respMsg) {\n\t\treturn Protocol.rs2arr(respMsg.body[0].rs[0]);\n\t}\n\n\tx(respMsg) { }\n\ty(respMsg) { }\n\tz(respMsg) { }\n}\n"],"sourceRoot":""}